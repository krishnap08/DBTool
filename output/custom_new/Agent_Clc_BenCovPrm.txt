-- 06/08/2012 MB - Issue 101877 - Performance enhancement
-- 05/11/2011 INT_NN - 71710-SD-MOR - Calculations commented for the Fields ADDHrSalCZ, BLifHrSalCZ, SLHr1xCZ, SLHr2xCZ and new field calculation added for BenEarningsCZ and LTDSalCZ
-- 08/27/2009 AB - Merged with standard 4.13 (CG - Event 41456 - Added EnrSum parameter to Clc_getRtTblVal call, AB - Event:37667 - Added conditional EmpEnrSum.EnrSum for flex credit calculations, VV - Event 26249 - Flex credits not showing in EmBenCurr)
-- 08/18/2009 INT_KC - 41573-SD-MOR - Fields ADDHrSalCZ, BLifHrSalCZ, SLHr1xCZ, SLHr2xCZ added for calculations
-- 06/18/2009 INT_AG - Event-28774- Fields AddSalCZ,BlifSalCZ,SL1xSalaryCZ and SL2xSalaryCZ added for calculations
-- 12/15/2008 VV - Event 23048 - Premium not calculating correctly for Total Premium
-- 12/05/2008 AB EVENT:22839 Split the @CovNew logic based on @CovRounding value 
-- 09/08/2008 SN - Fix where EmpCov became the cmpcov when empcov is emp specific amount (Event 18190)
-- 08/21/2008 HL - Fix Calculation logic error so both Cov/Prem will calculate correctly in one pass.
-- 06/27/2008 HL - Change location of code checking max/min coverage
-- 06/17/2008 HL - Event 16051 - Premium derived from total coverage
-- 06/16/2008 HL - Event 15686 - Fixing Rounding Rule after salary options (Corrected an error introduced with event 12914)
-- 02/22/2008 INT - Fixed event# 12914
-- 02/22/2008 INT - Fixed event# 12186 
-- 02/22/2008 INT - Premium calculations are moved after the individual Company, Employee AND Total Premium have been calculated. Corrected Coverage calculation.
-- 12/17/2007 HL - Add to the logic of coverage AND premium calculation to hANDle the condition WHERE rate table returns a dollar amount (Event 11889)
-- 11/30/2007 HL - Rework the logic to calculate Coverage AND Premium (Event 8794)
-- 11/20/2007 HL - Calculate coverage based premium based on 1.EmpBen; 2.EmpBenElg(when no record in EmpBen) - Event 11386
-- 04/30/2007 SK - Premium fix merge Evt 7602
-- RRR 03/16/2007 - Date HANDling
-- INT 01/23/2007 - Fixed Date Time HANDling errors
-- RJ 04/14/2006 - Eml#
-- SN 10/26/2005 - Removed payroll deduction code
-- RJ 07/10/2003 - Coverage Calc Fix after Ben - SP
-- RJ 11/08/2002 - if Eml does NOT exist for period (BenStDt to ENDofEnrollment Period) then take most current eml rec
-- RJ 10/17/2002 Most recent sal for the period (BenStDt to ENDofEnrollment Period)
-- RJ 10/10/2002 Cov Rate Table Fix
-- RJ 09/04/2002 Prem Calc Fixed
-- RJ 07/15/2002 Factor Rate Table
-- RJ 07/01/2002 RJ - Frozen Salaries/ Max Of 'Of'
-- RJ 05/29/2002 RJ V3.0 - WklyFrzSal
-- RJ 05/23/2002 RJ V3.0 - Unit changed from smallint to int
-- RJ 09/24/2001 V3.0 - AnnlFrzSal
-- RJ 07/20/2001 V3.0 - BenENDDt, BenGrp
-- RJ 06/26/2000 V2.3 - Removed Elig
-- RJ 06/23/2000 V2.3 - Real 
-- RJ 04/19/2000 V2.3 - SQLStmt
CREATE PROCEDURE Clc_BenCovPrm 
@EmpNew nVarChar(15),
@EmlNew nVarChar(15),
@BenNew nVarChar(15),
  @BenEffDt Datetime,  
  @UnitsNew int, 
  @EmpCovNew money output, 
  @CmpCovNew money output, 
  @TotCovNew money output, 
  @EmpPremNew money output,
  @CmpPremNew money output,
  @TotPremNew money output,
  @FlexCreditNew money output
WITH EXECUTE AS 'dbo' 
AS
DECLARE @BenCur nVarChar(3)
DECLARE @BenStartDt Datetime
DECLARE @EnrollSum nVarChar(15), @CovNew money, @CovAmount money, @CovRounding smallint, @CovRoundAmt money, @CovPerUnit real, @CovMaximum real, @CovMinimum money, @CovMultiple real,
@CovMultipleFld nVarChar(25), @CovRateTbl nVarChar(20), @PremFlatRate real, @PremRounding smallint, @PremRoundAmt money, @PremPerUnit real, @PremMinimum money,
@PremMaximum money, @PremRate real, @PremRatePer money, @PremRateOf smallint, @CovFromRateTbl money, @PremFromRateTbl money, @PremNew money, @PremDirection nVarChar(10), @PremRoundValue money, @PremValue money,
@PremRateTbl nVarChar(20), @ECovAmount money, @ECovRounding smallint, @ECovRoundAmt money, @ECovPerUnit real, @ECovMaximum real, @ECovMinimum money, @ECovMultiple real,
@ECovMultipleFld nVarChar(25), @EPremFlatRate real, @EPremRounding smallint, @EPremRoundAmt money, @EPremPerUnit real, @EPremMinimum money, @EPremMaximum money,
@EPremRate real, @EPremRatePer money, @EPremRateOf smallint, @ECovRateTbl nVarChar(20), @EPremRateTbl nVarChar(20), @EFlxCovAmount MONEY, @EFlxCovMultiple REAL,
@EFlxCovPerUnit MONEY, @EFlxCovRateTbl nVarChar(15), @EFlxCovMultipleFld nVarChar(25), @EFlxCovRounding INT, @EFlxCovRoundAmt MONEY, @EFlxCovMinimum MONEY,
@EFlxCovMaximum MONEY, @EFlxPremFlatRate MONEY, @EFlxPremRate REAL, @EFlxPremPerUnit MONEY, @EFlxPremRateTbl nVarChar(15), @EFlxPremRatePer MONEY,
  @EFlxPremRateOf INT, @EFlxPremRounding INT, @EFlxPremRoundAmt MONEY, @EFlxPremMinimum MONEY, @EFlxPremMaximum MONEY 
DECLARE @CCovAmount money, @CCovRounding smallint, @CCovRoundAmt money, @CCovPerUnit real, @CCovMaximum real, @CCovMinimum money, @CCovMultiple real, @CCovMultipleFld nVarChar(25),
@CCovRateTbl nVarChar(20), @CPremRateTbl nVarChar(20), @CPremFlatRate real, @CPremRounding smallint, @CPremRoundAmt money, @CPremPerUnit real, @CPremMinimum money,
  @CPremMaximum money, @CPremRate real, @CPremRatePer money, @CPremRateOf smallint, @TCovAmount money, @TCovRounding smallint, @TCovRoundAmt money, 
@TCovPerUnit real, @TCovMaximum real, @TCovMinimum money, @TCovMultiple real, @TCovMultipleFld nVarChar(25), @TCovRateTbl nVarChar(20), @TPremRateTbl nVarChar(20),
  @TPremFlatRate real, @TPremRounding smallint, @TPremRoundAmt money, @TPremPerUnit real, @TPremMinimum money, @TPremMaximum money, @TPremRate real, 
  @TPremRatePer money, @TPremRateOf smallint
DECLARE @CovCounter smallint, @Direction nVarChar(10), @RoundValue money, @Value money, @PremCounter smallint, @TblRate float, @AnnlSal money, @AnnlFrzSal money, @WklyFrzSal money,
@WrkHrs real, @SQLStmt nVarChar(MAX), @sSQL nVarChar(MAX), @BenGrp nVarChar(15), @CoverageCalc Int, @PremiumCalc Int, @RoundMultipler int,
  @FlexCov Money, @EmpCovTmp Money, @CmpCovTmp Money, @TotCovTmp Money, @EmpCovFlx Money, @FrzAnnlSal money, @FrzWklySal money, @FrzMnthSal Money, @FrzBiWkSal Money, @FrzSemiSal Money, 
  @FrzDalySal Money, @FrzHrlySal Money, @FlexCredits Money, @EmpPremFlx bit, @CmpPremFlx Bit, @FlatFlx bit, @CalEmpPremFlx Bit, @TotPremFlx Bit, @CalSQLFlx Bit, 
@CPremRateMaxOf MONEY, @EPremRateMaxOf MONEY, @TPremRateMaxOf MONEY, @EFlxPremRateMaxOf MONEY, @PremRateMaxOf MONEY, @PremOFAmount MONEY, @CovMultipliedByAmount money, @InsertedId Int, @FtrRate float,
@FtrRule VarChar(15), @FtrBrk Float, @EnrSum Varchar(15), @BenEfdDt Datetime
--71710-SD-MOR Variables commented
--41573-SD-MOR Variables declared for newly added fields start
--DECLARE @ADDHrSalCZ MONEY, @BLifHrSalCZ MONEY, @SLHr1xCZ MONEY, @SLHr2xCZ MONEY
--41573-SD-MOR Variables declared for newly added fields end
--71710-SD-MOR Variables declared for newly added fields start
  DECLARE @BenEarningsCZ MONEY, @LTDSalCZ MONEY
--71710-SD-MOR Variables declared for newly added fields end
DECLARE @IsEmpCovEmpAmt bit, @tmpEnr nVarChar(25)

SELECT 
  @ECovAmount=ECovAmount, @ECovRounding=ECovRounding, @ECovRoundAmt=ECovRoundAmt, @ECovPerUnit=ECovPerUnit, 
  @ECovMaximum=ECovMaximum, @ECovMinimum=ECovMinimum, @ECovMultiple=ECovMultiple, @ECovMultipleFld=ECovMultipleFld, @ECovRateTbl =ECovRateTbl,
  @EPremFlatRate=EPremFlatRate, @EPremRounding=EPremRounding, @EPremRoundAmt=EPremRoundAmt, @EPremPerUnit=EPremPerUnit, 
  @EPremMinimum=EPremMinimum, @EPremMaximum=EPremMaximum, @EPremRate=EPremRate, @EPremRatePer=EPremRatePer, @EPremRateOf=EPremRateOf, @EPremRateTbl =EPremRateTbl,
  @CCovAmount=CCovAmount, @CCovRounding=CCovRounding, @CCovRoundAmt=CCovRoundAmt, @CCovPerUnit=CCovPerUnit, 
  @CCovMaximum=CCovMaximum, @CCovMinimum=CCovMinimum, @CCovMultiple=CCovMultiple, @CCovMultipleFld = CCovMultipleFld, @CCovRateTbl = CCovRateTbl, 
  @CPremFlatRate=CPremFlatRate, @CPremRounding=CPremRounding, @CPremRoundAmt=CPremRoundAmt, @CPremPerUnit=CPremPerUnit, 
  @CPremMinimum=CPremMinimum, @CPremMaximum=CPremMaximum, @CPremRate=CPremRate, @CPremRatePer=CPremRatePer, @CPremRateOf=CPremRateOf, @CPremRateTbl = CPremRateTbl,  
  @TCovAmount=TCovAmount, @TCovRounding=TCovRounding, @TCovRoundAmt=TCovRoundAmt, @TCovPerUnit=TCovPerUnit, 
  @TCovMaximum=TCovMaximum, @TCovMinimum=TCovMinimum, @TCovMultiple=TCovMultiple, @TCovMultipleFld = TCovMultipleFld, @TCovRateTbl = TCovRateTbl, 
  @TPremFlatRate=TPremFlatRate, @TPremRounding=TPremRounding, @TPremRoundAmt=TPremRoundAmt, @TPremPerUnit=TPremPerUnit, 
  @TPremMinimum=TPremMinimum, @TPremMaximum=TPremMaximum, @TPremRate=TPremRate, @TPremRatePer=TPremRatePer, @TPremRateOf=TPremRateOf, @TPremRateTbl = TPremRateTbl,
  @BenGrp = IsNull(ZZBen.BenGrp,''), 
@SQLStmt = SQLStmt, @CoverageCalc = CoverageCalc, @PremiumCalc = PremiumCalc, @sSQL = CONVERT(nVarChar(MAX),SQLFlx),
  @EFlxCovAmount = EFlxCovAmount, @EFlxCovMultiple = EFlxCovMultiple, @EFlxCovPerUnit = EFlxCovPerUnit, @EFlxCovRateTbl = EFlxCovRateTbl, @EFlxCovMultipleFld = EFlxCovMultipleFld,
  @EFlxCovRounding = EFlxCovRounding, @EFlxCovRoundAmt = EFlxCovRoundAmt, @EFlxCovMinimum = EFlxCovMinimum, @EFlxCovMaximum = EFlxCovMaximum,
  @EFlxPremFlatRate = EFlxPremFlatRate, @EFlxPremRate = EFlxPremRate, @EFlxPremPerUnit = EFlxPremPerUnit, @EFlxPremRateTbl = EFlxPremRateTbl,
  @EFlxPremRatePer = EFlxPremRatePer, @EFlxPremRateOf = EFlxPremRateOf, @EFlxPremRounding = EFlxPremRounding, @EFlxPremRoundAmt = EFlxPremRoundAmt,
  @EFlxPremMinimum  = EFlxPremMinimum, @EFlxPremMaximum = EFlxPremMaximum,
  @FlexCredits = FlexCredits, @EmpPremFlx = EmpPremFlx, @CmpPremFlx = CmpPremFlx, @TotPremFlx = TotPremFlx, @CalEmpPremFlx = CalEmpPremFlx, @FlatFlx = FlatFlx, @CalSQLFlx = CalSQLFlx,
  @CPremRateMaxOf = ISNULL(CPremRateMaxOf,0), @EPremRateMaxOf = ISNULL(EPremRateMaxOf,0), @TPremRateMaxOf = ISNULL(TPremRateMaxOf,0), @EFlxPremRateMaxOf = ISNULL(EFlxPremRateMaxOf,0), @EnrSum = ZZBen.EnrSum, @BenEfdDt = EnrENDDt,
@IsEmpCovEmpAmt=ISNULL(IsEmpCovEmpAmt,0), @BenCur = ZZBen.BenCur, @BenStartDt = ZZBen.BenStartDt
FROM ZZBen, ZZEnrSum WHERE @BenNew=Ben AND ZZBen.EnrSum = ZZEnrSum.EnrSum 

SELECT
  @UnitsNew= ISNULL(@UnitsNew,0),
  @EmpCovNew= ISNULL(@EmpCovNew,0),
  @CmpCovNew= ISNULL(@CmpCovNew,0),
  @TotCovNew =ISNULL(@TotCovNew,0),
  @EmpPremNew=ISNULL(@EmpPremNew,0),
  @CmpPremNew= ISNULL(@CmpPremNew,0),
  @TotPremNew=ISNULL(@TotPremNew,0) 

SELECT @FrzAnnlSal = dbo.NuConvertCur(ISNULL(FrzAnnlSal,0), FrzAnnlSalCur, @BenCur, @BenStartDt), @FrzWklySal = dbo.NuConvertCur(ISNULL(FrzWklySal,0), FrzWklySalCur, @BenCur, @BenStartDt), @FrzMnthSal = dbo.NuConvertCur(ISNULL(FrzMnthSal,0), FrzMnthSalCur, @BenCur, @BenStartDt), @FrzSemiSal = dbo.NuConvertCur(ISNULL(FrzSemiSal,0), FrzSemiSalCur, @BenCur, @BenStartDt), @FrzBiWkSal = dbo.NuConvertCur(ISNULL(FrzBiWkSal,0), FrzBiWkSalCur, @BenCur, @BenStartDt),
@FrzDalySal = dbo.NuConvertCur(ISNULL(FrzDalySal,0), FrzDalySalCur, @BenCur, @BenStartDt), @FrzHrlySal = dbo.NuConvertCur(ISNULL(FrzHrlySal,0), FrzHrlySalCur, @BenCur, @BenStartDt)
    FROM ZZEmpEnrSum WHERE ZZEmpEnrSum.Emp = @EmpNew AND ZZEmpEnrSum.Eml = @EmlNew AND ZZEmpEnrSum.EnrSum = @EnrSum

SELECT
@EnrollSum = ISNULL(@EnrSum,0)


/*
    Make sure we fetch the salary from the correct Eml record

               Current Time
                   \--v             
    -----|------------*----------|----
         ^--- Benefit  Benefit --^
    

    We want to fetch the Eml record which is effective at a point in time: ideally the
    current date/time, but constrained by the start and end of the benefit. In other words:
      If the benefit is in the future, we want the record effective when it starts,
      If the benefit is in the past, we want the record effective when it ended, 
      Otherwise we want the record effective today.
    
    However, we add a fail-safe to protect against EE's with ONLY future-dated Eml records. (In principle 
    that should never happen, because benefits should not start before employment. But being safe.)
    The fail-safe is that insted of strictly reading the point in time, we find the EARLIEST record
    on-or-after that point in time.
    
    Note: The @BenEfdDt+1day-1second closes the gap of a mid-day Eml change on 12/31. No sense being sloppy.
*/

SELECT TOP 1 @AnnlSal=dbo.NuConvertCur(ISNULL(AnnlSal,0), AnnlSalCur, @BenCur, @BenStartDt), @WrkHrs =ISNULL(WrkHrs,0), @ADDSalCZ = ISNULL(ADDSalCZ, 0), @BLifSalCZ = ISNULL(BLifSalCZ, 0),
      /* 41573-SD-MOR - Values from the newly added fields retrieved - starts */
    /*Code commented for 71710-MOR*/
      /*@ADDHrSalCZ = ISNULL(ZZEml.ADDHrSalCZ, 0),
      @BLifHrSalCZ = ISNULL(ZZEml.BLifHrSalCZ, 0),
      @SLHr1xCZ = ISNULL(ZZEml.SLHr1xCZ, 0),
      @SLHr2xCZ = ISNULL(ZZEml.SLHr2xCZ, 0)*/
      /* 41573-SD-MOR - Values from the newly added fields retrieved - ends */ 
    /* 71710-MOR - Values from the newly added fields retrieved - starts */
      @BenEarningsCZ = ISNULL(ZZEml.BenEarningsCZ, 0),
      @LTDSalCZ = ISNULL(ZZEml.LTDSalCZ, 0)
    /* 71710-MOR - Values from the newly added fields retrieved - ends */
    FROM ZZEml
WHERE ZZEml.Emp = @EmpNew AND ZZEml.Eml = @EmlNew 
	AND (ZZEml.EmlEfdDt IS NULL OR ZZEml.EmlEfdDt >                     /* Exclude records before the point in time. */
	  dbo.MinDate(DATEADD(second, -1, DATEADD(day, 1, dbo.NuDateGetDate(@BenEfdDt))), dbo.MaxDate(@BenEffDt, GetDate())))
ORDER BY ZZEml.EmlEffDt ASC											    /* Sort to find the earliest */

-- It is also important to use the correct point in time for rate tables.
-- The same logic applies, but don't do -1second because rate tables use this date to fetch EmpEnrSum records. 
DECLARE @PointInTimeDate DATETIME
SET @PointInTimeDate = dbo.MinDate(dbo.NuDateGetDate(@BenEfdDt), dbo.MaxDate(@BenEffDt, GetDate()))

  
  SELECT @SL1xSalaryCZ = ISNULL(SL1xSalaryCZ, 0), @SL2xSalaryCZ = ISNULL(SL2xSalaryCZ, 0)
    FROM ZZEml WHERE 
    ZZEml.Emp= @EmpNew AND ZZEml.Eml = 1 AND EmlEfdDt IS NULL
    
-- Start Coverage Calculation
-- Coverage Amount Calculation Logic:
-- http://wikiserver/partners/tiki-index.php?page=Benefit+Calculations
SELECT @CovCounter = 1
WHILE @CovCounter < 5 
  BEGIN
    IF @CovCounter = 1 
      BEGIN 
        SELECT 
          @CovAmount = ISNULL(@CCovAmount,0), 
          @CovRounding = ISNULL(@CCovRounding,0), 
          @CovRoundAmt = ISNULL(@CCovRoundAmt,0), 
          @CovPerUnit = ISNULL(@CCovPerUnit,0),
          @CovMaximum = ISNULL(@CCovMaximum,0), 
          @CovMinimum = ISNULL(@CCovMinimum,0), 
          @CovMultiple = ISNULL(@CCovMultiple,0), 
          @CovMultipleFld = @CCovMultipleFld, 
          @CovRateTbl = @CCovRateTbl
      END
    ELSE IF @CovCounter =2 
      BEGIN 
        SELECT 
          @CovAmount = ISNULL(@ECovAmount,0), 
          @CovRounding = ISNULL(@ECovRounding,0), 
          @CovRoundAmt = ISNULL(@ECovRoundAmt,0), 
          @CovPerUnit = ISNULL(@ECovPerUnit,0),
          @CovMaximum = ISNULL(@ECovMaximum,0), 
          @CovMinimum = ISNULL(@ECovMinimum,0), 
          @CovMultiple = ISNULL(@ECovMultiple,0), 
          @CovMultipleFld = @ECovMultipleFld,
          @CovRateTbl = @ECovRateTbl
      END 
    ELSE IF @CovCounter = 3
      BEGIN
        SELECT 
          @CovAmount = ISNULL(@TCovAmount,0),
          @CovRounding = ISNULL(@TCovRounding,0),
          @CovRoundAmt = ISNULL(@TCovRoundAmt,0),
          @CovPerUnit = ISNULL(@TCovPerUnit,0),
          @CovMaximum = ISNULL(@TCovMaximum,0),
          @CovMinimum = ISNULL(@TCovMinimum,0),
          @CovMultiple = ISNULL(@TCovMultiple,0),
          @CovMultipleFld = @TCovMultipleFld,
          @CovRateTbl = @TCovRateTbl
      END
    ELSE
      BEGIN 
        SELECT 
          @CovAmount = ISNULL(@EFlxCovAmount,0), 
          @CovRounding = ISNULL(@EFlxCovRounding,0), 
          @CovRoundAmt = ISNULL(@EFlxCovRoundAmt,0), 
          @CovPerUnit = ISNULL(@EFlxCovPerUnit,0),
          @CovMaximum = ISNULL(@EFlxCovMaximum,0), 
          @CovMinimum = ISNULL(@EFlxCovMinimum,0), 
          @CovMultiple = ISNULL(@EFlxCovMultiple,0), 
          @CovMultipleFld = @EFlxCovMultipleFld,
          @CovRateTbl = @EFlxCovRateTbl
      END  

    SELECT @TblRate = 0, @CovNew = 0, @FtrRate =0, @FtrRule = null, @FtrBrk = 0
--AB EVENT:22839 Split the @CovNew logic based on @CovRounding value - START  
      IF @CovRounding <> 0
           BEGIN
            SELECT @Direction = 
            CASE @CovRounding  
               WHEN 1 THEN 'Nearest'
               WHEN 2 THEN 'Up'
               WHEN 3 THEN 'Down'
               WHEN 4 THEN 'Nearest'
               WHEN 5 THEN 'Up'
               WHEN 6 THEN 'Down'
            END
      END    
        -- Only go into this block when CovRounding has values like 'Off After Salary', 'Up After Salary', 'Down After Salary'
        IF @CovRounding > 3 
         BEGIN
      -- If "Multiplied By" (@CovMultipleFld) is blank, use 1 AS @CovMultipliedByAmount
          IF @CovMultipleFld IS NOT NULL AND @CovMultipleFld <> ''
          BEGIN
            IF @CovMultiPleFld = 'FrozenAnnualSalary'
              SELECT @Value = @FrzAnnlSal
            ELSE IF @CovMultiPleFld = 'FrozenMonthlySalary'
              SELECT @Value = @FrzMnthSal
            ELSE IF @CovMultiPleFld = 'FrozenSemiMonthlySalary'
              SELECT @Value = @FrzSemiSal
            ELSE IF @CovMultiPleFld = 'FrozenBiWeeklySalary'
              SELECT @Value = @FrzBiWkSal
            ELSE IF @CovMultiPleFld = 'FrozenWeeklySalary'
              SELECT @Value = @FrzWklySal
            ELSE IF @CovMultiPleFld = 'FrozENDailySalary'
              SELECT @Value = @FrzDalySal
            ELSE IF @CovMultiPleFld = 'FrozenHourlySalary'
              SELECT @Value = @FrzHrlySal
            IF @CovMultiPleFld = 'AnnualSalary'
              SELECT @Value = @AnnlSal
            ELSE IF @CovMultiPleFld = 'MonthlySalary'
              SELECT @Value = ( @AnnlSal / 12 )
            ELSE IF @CovMultiPleFld = 'SemiMonthlySalary'
              SELECT @Value = ( @AnnlSal / 24 )
            ELSE IF @CovMultiPleFld = 'BiWeeklySalary'
              SELECT @Value = ( @AnnlSal / 26 )
            ELSE IF @CovMultiPleFld = 'WeeklySalary'
              SELECT @Value = ( @AnnlSal / 52 )
            ELSE IF @CovMultiPleFld = 'DailySalary'
              SELECT @Value = (@AnnlSal / (365.25))
            ELSE IF @CovMultiPleFld = 'HourlySalary'
              SELECT @Value = (@AnnlSal / (52 * @WrkHrs))
            ELSE IF @CovMultipleFld = 'BLifSalCZ'
              SELECT @Value = @BLifSalCZ
            ELSE IF @CovMultipleFld = 'ADDSalCZ'
              SELECT @Value = @ADDSalCZ
            ELSE IF @CovMultipleFld = 'SL1xSalary'
              SELECT @Value = @SL1xSalaryCZ
            ELSE IF @CovMultipleFld = 'SL2xSalary'
              SELECT @Value = @SL2xSalaryCZ
            /* 
             * 41573-SD-MOR:
             * Logic to use the newly added salary fields in benefit calculations starts
             */
            /*Logic commented for 71710-MOR*/
            /*ELSE IF @CovMultipleFld = 'ADDHrSalCZ'
              SELECT @Value = @ADDHrSalCZ
            ELSE IF @CovMultipleFld = 'BLifHrSalCZ'
              SELECT @Value = @BLifHrSalCZ
            ELSE IF @CovMultipleFld = 'SLHr1xCZ'
              SELECT @Value = @SLHr1xCZ
            ELSE IF @CovMultipleFld = 'SLHr2xCZ'
              SELECT @Value = @SLHr2xCZ*/
            /* Logic to use the newly added salary fields in benefit calculations ends */
         
            /* 
             * 71710-MOR:
             * Logic to use the newly added salary fields in benefit calculations starts
             */
            ELSE IF @CovMultipleFld = 'BenEarningsCZ'
              SELECT @Value = @BenEarningsCZ
            ELSE IF @CovMultipleFld = 'LTDSalCZ'
              SELECT @Value = @LTDSalCZ
            /* Logic to use the newly added salary fields in benefit calculations ends */
EXECUTE dbo.Clc_Round @Value, @Direction, @CovRoundAmt, @CovMultipliedByAmount output
      END  
      ELSE
          BEGIN
             SELECT @CovMultipliedByAmount = 1
      END      
          SELECT @CovNew = @CovMultipliedByAmount * @CovMultiple

-- Only go into this block "rate table" (@CovRateTbl) has value
IF (@CovRateTbl IS NOT NULL AND @CovRateTbl <> '')
BEGIN
EXECUTE dbo.Clc_getRtTblVal @CovRateTbl, @EmpNew, @EmlNew, @BenGrp, @EligibleDt, @EnrollSum, @TblRate output, @FtrRate output, @FtrRule output, @FtrBrk output
SELECT @TblRate = IsNull(@TblRate,0), @FtrRate = ISNull(@FtrRate,0), @FtrBrk = ISNULL(@FtrBrk,0)

               IF @FtrRule IS NOT NULL AND @FtrRule <> '' 
                BEGIN
                 IF @FtrRule = 'Split' 
                   BEGIN
                    IF @FtrBrk < @CovMultipliedByAmount 
                      SELECT @CovFromRateTbl = (@FtrBrk * @TblRate) + ((@CovMultipliedByAmount - @FtrBrk) * @FtrRate)
                    ELSE
                      SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @TblRate)
                   END
                 ELSE IF @FtrRule = 'Above'
                   BEGIN
                      IF @FtrBrk < @CovMultipliedByAmount 
                      SELECT @CovFromRateTbl = ((@CovMultipliedByAmount - @FtrBrk) * @FtrRate)
                   END
                 ELSE IF @FtrRule = 'All'
                   BEGIN
                      IF @FtrBrk < @CovMultipliedByAmount 
                       SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @FtrRate)
                      ELSE
                       SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @TblRate)
                   END 
                END 
               ELSE
                BEGIN
                  SELECT @CovFromRateTbl = @CovMultipliedByAmount * @TblRate
                END

                SELECT @CovNew = @CovNew + @CovFromRateTbl
            END 

--PKG 6/28/2011--98927--Modified logic to use the amount from employee --multiplied by units, standard benefit hotfix
            IF @CovPerUnit IS NOT NULL 
SELECT @CovNew = @CovNew + (ISNULL(@UnitsNew,0) * ISNULL(@CovPerUnit,0)* @CovMultipliedByAmount)

            IF @CovAmount IS NOT NULL
             SELECT @CovNew = @CovNew + ISNULL(@CovAmount,0)
       END
     ELSE
     BEGIN
             -- If "Multiplied By" (@CovMultipleFld) is blank, use 1 AS @CovMultipliedByAmount
            IF @CovMultipleFld IS NOT NULL AND @CovMultipleFld <> ''
              BEGIN
                IF @CovMultipleFld = 'FrozenSalary' OR @CovMultipleFld = 'FrozenAnnualSalary'
          SELECT @CovMultipliedByAmount = @FrzAnnlSal
                IF @CovMultipleFld = 'WklyFrozenSalary' OR @CovMultipleFld = 'FrozenWeeklySalary'
          SELECT @CovMultipliedByAmount = @FrzWklySal    
        IF @CovMultipleFld = 'FrozenMonthlySalary' 
          SELECT @CovMultipliedByAmount = @FrzMnthSal    
        IF @CovMultipleFld = 'FrozenSemiMonthlySalary' 
          SELECT @CovMultipliedByAmount = @FrzSemiSal
        IF @CovMultipleFld = 'FrozenBiWeeklySalary' 
          SELECT @CovMultipliedByAmount = @FrzBiWkSal
        IF @CovMultipleFld = 'FrozENDailySalary' 
          SELECT @CovMultipliedByAmount = @FrzDalySal
        IF @CovMultipleFld = 'FrozenHourlySalary' 
          SELECT @CovMultipliedByAmount = @FrzHrlySal
        ELSE IF @CovMultipleFld = 'AnnualSalary'
          SELECT @CovMultipliedByAmount = @AnnlSal 
        ELSE IF @CovMultipleFld = 'MonthlySalary'
          SELECT @CovMultipliedByAmount = (@AnnlSal / 12)
        ELSE IF @CovMultipleFld = 'SemiMonthlySalary'
          SELECT @CovMultipliedByAmount = (@AnnlSal / 24)
        ELSE IF @CovMultipleFld = 'BiWeeklySalary'
          SELECT @CovMultipliedByAmount = (@AnnlSal / 26)
        ELSE IF @CovMultipleFld = 'WeeklySalary'
          SELECT @CovMultipliedByAmount = (@AnnlSal / 52)
--46490-LM-NV: Code Added For Fix Daily Salary Multiple Amount Not Considered Starts
/*
 * 365.25 is considered
  # Handle the leap year logic
  # Looking into the logic for rounding off rule like "Off After Salary", "Up After Salary", "Down After Salary"
 */
  ELSE IF @CovMultipleFld = 'DailySalary'
    SELECT @CovMultipliedByAmount = (@AnnlSal / 365.25)
--46490-LM-NV: Code Added For Fix Daily Salary Multiple Amount Not Considered Ends
        ELSE IF @CovMultipleFld = 'HourlySalary'
          SELECT @CovMultipliedByAmount = ((@AnnlSal / 52) / @WrkHrs)
  ELSE IF @CovMultipleFld = 'BLifSalCZ'
          SELECT @CovMultipliedByAmount = @BLifSalCZ
        ELSE IF @CovMultipleFld = 'ADDSalCZ'
          SELECT @CovMultipliedByAmount = @ADDSalCZ
        ELSE IF @CovMultipleFld = 'SL1xSalary'
          SELECT @CovMultipliedByAmount = @SL1xSalaryCZ
        ELSE IF @CovMultipleFld = 'SL2xSalary'
          SELECT @CovMultipliedByAmount = @SL2xSalaryCZ
        /*
         * 41573-SD-MOR:
         * Logic to use the newly added fields in the coverage calculations starts
         */
         /*Logic commented for 71710-MOR*/
        /*ELSE IF @CovMultipleFld = 'ADDHrSalCZ'
          SELECT @CovMultipliedByAmount = @ADDHrSalCZ
        ELSE IF @CovMultipleFld = 'BLifHrSalCZ'
          SELECT @CovMultipliedByAmount = @BLifHrSalCZ
        ELSE IF @CovMultipleFld = 'SLHr1xCZ'
          SELECT @CovMultipliedByAmount = @SLHr1xCZ
        ELSE IF @CovMultipleFld = 'SLHr2xCZ'
          SELECT @CovMultipliedByAmount = @SLHr2xCZ*/
        /*
         * Logic to use the newly added fields in the coverage calculations ends
         */
        /* 
         * 71710-MOR:
         * Logic to use the newly added salary fields in benefit calculations starts
         */
        ELSE IF @CovMultipleFld = 'BenEarningsCZ'
          SELECT @CovMultipliedByAmount = @BenEarningsCZ
        ELSE IF @CovMultipleFld = 'LTDSalCZ'
          SELECT @CovMultipliedByAmount = @LTDSalCZ
        /* Logic to use the newly added salary fields in benefit calculations ends */         
        END
      ELSE
              BEGIN
                    SELECT @CovMultipliedByAmount = 1
              END

            SELECT @CovNew = @CovMultipliedByAmount * @CovMultiple


-- Only go into this block "rate table" (@CovRateTbl) has value
IF (@CovRateTbl IS NOT NULL AND @CovRateTbl <> '')
BEGIN
EXECUTE dbo.Clc_getRtTblVal @CovRateTbl, @EmpNew, @EmlNew, @BenGrp, @EligibleDt, @EnrollSum, @TblRate output, @FtrRate output, @FtrRule output, @FtrBrk output
SELECT @TblRate = IsNull(@TblRate,0), @FtrRate = ISNull(@FtrRate,0), @FtrBrk = ISNULL(@FtrBrk,0)

               IF @FtrRule IS NOT NULL AND @FtrRule <> '' 
                BEGIN
                 IF @FtrRule = 'Split' 
                   BEGIN
                    IF @FtrBrk < @CovMultipliedByAmount 
                      SELECT @CovFromRateTbl = (@FtrBrk * @TblRate) + ((@CovMultipliedByAmount - @FtrBrk) * @FtrRate)
                    ELSE
                      SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @TblRate)
                   END
                 ELSE IF @FtrRule = 'Above'
                   BEGIN
                      IF @FtrBrk < @CovMultipliedByAmount 
                      SELECT @CovFromRateTbl = ((@CovMultipliedByAmount - @FtrBrk) * @FtrRate)
                   END
                 ELSE IF @FtrRule = 'All'
                   BEGIN
                      IF @FtrBrk < @CovMultipliedByAmount 
                       SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @FtrRate)
                      ELSE
                       SELECT @CovFromRateTbl = (@CovMultipliedByAmount * @TblRate)
                   END 
                END 
               ELSE
                BEGIN
                  SELECT @CovFromRateTbl = @CovMultipliedByAmount * @TblRate
                END

                SELECT @CovNew = @CovNew + @CovFromRateTbl
            END 

--PKG 6/28/2011--98927--Modified logic to use the amount from employee --multiplied by units, standard benefit hotfix
            IF @CovPerUnit IS NOT NULL 
SELECT @CovNew = @CovNew + (ISNULL(@UnitsNew,0) * ISNULL(@CovPerUnit,0)*@CovMultipliedByAmount)

            IF @CovAmount IS NOT NULL
             SELECT @CovNew = @CovNew + ISNULL(@CovAmount,0)

EXECUTE dbo.Clc_Round @CovNew, @Direction, @CovRoundAmt, @RoundValue output
            SELECT @CovNew = @RoundValue
     END  
--AB EVENT:22839 Split the @CovNew logic based on @CovRounding value - END 

    IF (@IsEmpCovEmpAmt=1 and @CovCounter = 2)
    BEGIN
        IF (SELECT COUNT(*) FROM EmpBen WHERE Emp = @EmpNew AND ben = @BenNew AND EmpBenEfdDt IS NULL) > 0 
SELECT @CovNew = dbo.NuConvertCur(EmpCov, EmpCovCur, @BenCur, @BenStartDt) FROM EmpBen WHERE Emp = @EmpNew AND ben = @BenNew AND EmpBenEfdDt IS NULL
        ELSE
SELECT @CovNew = dbo.NuConvertCur(EmpCov, EmpCovCur, @BenCur, @BenStartDt) FROM EmpBenElg WHERE Emp = @EmpNew AND ben = @BenNew AND EmpBenElgEfdDt IS NULL
      END

    IF (@CovMaximum <> 0)
      BEGIN
        IF @CovNew > @CovMaximum
          SELECT @CovNew = @CovMaximum
      END

    IF (@CovMinimum <> 0)
      BEGIN
        IF @CovNew < @CovMinimum 
          SELECT @CovNew = @CovMinimum
      END

    IF @CovCounter = 1 
      SELECT @CmpCovNew = @CovNew --, @CmpCovTmp = @CovNew
    ELSE IF @CovCounter = 2 
      SELECT @EmpCovNew = @CovNew --, @EmpCovTmp = @CovNew
    ELSE IF @CovCounter = 3 
      SELECT @TotCovNew = @CovNew --, @TotCovTmp = @CovNew
    ELSE 
      SELECT @EmpCovFlx = @CovNew

    SELECT @CovCounter = @CovCounter + 1
  END

IF @CoverageCalc = 1
  SELECT @CmpCovNew = @TotCovNew - @EmpCovNew
ELSE IF @CoverageCalc = 2
  SELECT @EmpCovNew = @TotCovNew - @CmpCovNew
ELSE 
  SELECT @TotCovNew = @CmpCovNew + @EmpCovNew
-- End Coverage Calculation
  

-- Start Premium Calculation
-- Premium Amount Calculation Logic:
-- http://wikiserver/partners/tiki-index.php?page=Benefit+Calculations
SELECT @PremCounter = 1
WHILE @PremCounter < 5 
  BEGIN
    IF @PremCounter = 1
      BEGIN 
        SELECT 
          @PremFlatRate = ISNULL(@CPremFlatRate,0), 
          @PremRounding = ISNULL(@CPremRounding,0), 
          @PremRoundAmt = ISNULL(@CPremRoundAmt,0), 
          @PremPerUnit = ISNULL(@CPremPerUnit,0),  
          @PremMaximum = ISNULL(@CPremMaximum,0), 
          @PremMinimum = ISNULL(@CPremMinimum,0), 
          @PremRate = ISNULL(@CPremRate,0), 
          @PremRatePer = ISNULL(@CPremRatePer,0),
          @PremRateOf = @CPremRateOf, 
          @PremRateTbl = @CPremRateTbl, 
          --@CmpCovNew = @CmpCovTmp,
          @PremRateMaxOf = @CPremRateMaxOf
      END
    ELSE IF @PremCounter = 2
      BEGIN
        SELECT 
          @PremFlatRate = ISNULL(@EPremFlatRate,0), 
          @PremRounding = ISNULL(@EPremRounding,0),
          @PremRoundAmt = ISNULL(@EPremRoundAmt,0), 
          @PremPerUnit = ISNULL(@EPremPerUnit,0), 
          @PremMaximum = ISNULL(@EPremMaximum,0), 
          @PremMinimum = ISNULL(@EPremMinimum,0), 
          @PremRate = ISNULL(@EPremRate,0), 
          @PremRatePer = ISNULL(@EPremRatePer,0),
          @PremRateOf = @EPremRateOf, 
          @PremRateTbl = @EPremRateTbl, 
          --@EmpCovNew = @EmpCovTmp, 
          @PremRateMaxOf = @EPremRateMaxOf
      END
    ELSE IF @PremCounter = 3
      BEGIN
        SELECT
          @PremFlatRate = ISNULL(@TPremFlatRate,0), 
          @PremRounding = ISNULL(@TPremRounding,0), 
          @PremRoundAmt = ISNULL(@TPremRoundAmt,0), 
          @PremPerUnit = ISNULL(@TPremPerUnit,0),  
          @PremMaximum = ISNULL(@TPremMaximum,0),
          @PremMinimum = ISNULL(@TPremMinimum,0),
          @PremRate = ISNULL(@TPremRate,0),
          @PremRatePer = ISNULL(@TPremRatePer,0),
          @PremRateOf = @TPremRateOf,
          --@TotCovNew = @TotCovTmp,
          @PremRateTbl = @TPremRateTbl,
      @PremRateMaxOf = @TPremRateMaxOf
      END
    ELSE 
      BEGIN
        SELECT  
          @PremFlatRate = ISNULL(@EFlxPremFlatRate,0), 
          @PremRounding = ISNULL(@EFlxPremRounding,0), 
          @PremRoundAmt = ISNULL(@EFlxPremRoundAmt,0), 
          @PremPerUnit = ISNULL(@EFlxPremPerUnit,0), 
          @PremMaximum = ISNULL(@EFlxPremMaximum,0), 
          @PremMinimum = ISNULL(@EFlxPremMinimum,0), 
          @PremRate = ISNULL(@EFlxPremRate,0), 
          @PremRatePer = ISNULL(@EFlxPremRatePer,0), 
          @PremRateOf = @EFlxPremRateOf,
          @PremRateTbl = @EFlxPremRateTbl, 
          --@EmpCovNew = @EmpCovFlx, 
          @PremRateMaxOf = @EFlxPremRateMaxOf
      END

    SELECT @TblRate = 0, @PremNew = 0, @FtrRate =0, @FtrRule = null, @FtrBrk = 0

    -- If "Of Amount"(@PremRateOf) is blank use 1 AS @PremOFAmount
    IF @PremRateOf IS NOT NULL
      BEGIN
        IF @PremRateOf = 0
          SELECT @PremOFAmount = @TotCovNew
        ELSE IF @PremRateOf = 1
          SELECT @PremOFAmount = @CmpCovNew
        ELSE IF @PremRateOf = 2
          IF @PremCounter > 3
            SELECT @PremOFAmount = @EmpCovFlx
          ELSE
            SELECT @PremOFAmount = @EmpCovNew
        ELSE IF @PremRateOf = 3
          SELECT @PremOFAmount = @FrzAnnlSal
        ELSE IF @PremRateOf = 4
          SELECT @PremOFAmount = @FrzMnthSal
        ELSE IF @PremRateOf = 5
          SELECT @PremOFAmount = @FrzSemiSal
        ELSE IF @PremRateOf = 6
          SELECT @PremOFAmount = @FrzBiWkSal
        ELSE IF @PremRateOf = 7
          SELECT @PremOFAmount = @FrzWklySal
        ELSE IF @PremRateOf = 8
          SELECT @PremOFAmount = @FrzDalySal
        ELSE IF @PremRateOf = 9
          SELECT @PremOFAmount = @FrzHrlySal 
        ELSE IF @PremRateOf = 10
          SELECT @PremOFAmount = @AnnlSal
        ELSE IF @PremRateOf = 11
          SELECT @PremOFAmount = (@AnnlSal / 12)
        ELSE IF @PremRateOf = 12 
          SELECT @PremOFAmount = (@AnnlSal / 24)
        ELSE IF @PremRateOf = 13
          SELECT @PremOFAmount = (@AnnlSal / 26)
        ELSE IF @PremRateOf = 14
          SELECT @PremOFAmount = (@AnnlSal /52)
        ELSE IF @PremRateOf = 15
          SELECT @PremOFAmount = (@AnnlSal / 365.25)
        ELSE IF @PremRateOf = 16
          SELECT @PremOFAmount = ((@AnnlSal / 52)/ @WrkHrs)
        /* 71710 INT_KC: Options Added */
        ELSE IF @PremRateOf = 17
          SELECT @PremOFAmount = @BenEarningsCZ
        ELSE IF @PremRateOf = 18
          SELECT @PremOFAmount = @LTDSalCZ
        ELSE IF @PremRateOf = 19
          SELECT @PremOFAmount = @BLifSalCZ
        ELSE IF @PremRateOf = 20
          SELECT @PremOFAmount = @ADDSalCZ
        ELSE IF @PremRateOf = 21
          SELECT @PremOFAmount = @SL1xSalaryCZ
        ELSE IF @PremRateOf = 22
          SELECT @PremOFAmount = @SL2xSalaryCZ

        -- If the SELECTed amount is over the maximum, then use the maximum.
        IF @PremOFAmount > (CASE WHEN @PremRateMaxOf = 0 THEN 999999999999.00 ELSE @PremRateMaxOf END) AND @PremRateMaxOf <> 0
          SELECT @PremOFAmount = @PremRateMaxOf
      END
    ELSE
      BEGIN
        SELECT @PremOFAmount = 1
      END

    SELECT @PremNew = @PremOFAmount * @PremRate

-- Only go into this block "rate table" (@PremRateTbl) has value
IF (@PremRateTbl IS NOT NULL AND @PremRateTbl <> '')
BEGIN
EXECUTE dbo.Clc_getRtTblVal @PremRateTbl, @EmpNew, @EmlNew, @BenGrp, @@EligibleDt, @EnrollSum, @TblRate output, @FtrRate output, @FtrRule output, @FtrBrk output
SELECT @TblRate = IsNull(@TblRate,0), @FtrRate = ISNull(@FtrRate,0), @FtrBrk = ISNULL(@FtrBrk,0)

        IF @FtrRule IS NOT NULL AND @FtrRule <> '' 
          BEGIN
            IF @FtrRule = 'Split' 
              BEGIN
                IF @FtrBrk < @PremOFAmount 
                  SELECT @PremFromRateTbl = (@FtrBrk * @TblRate) + ((@PremOFAmount - @FtrBrk) * @FtrRate)
                ELSE
                  SELECT @PremFromRateTbl = (@PremOFAmount * @TblRate)
              END
            ELSE IF @FtrRule = 'Above'
              BEGIN
                IF @FtrBrk < @PremOFAmount 
                  SELECT @PremFromRateTbl = ((@PremOFAmount - @FtrBrk) * @FtrRate)
              END
            ELSE IF @FtrRule = 'All'
              BEGIN
                IF @FtrBrk < @PremOFAmount 
                  SELECT @PremFromRateTbl = (@PremOFAmount * @FtrRate)
                ELSE
                  SELECT @PremFromRateTbl = (@PremOFAmount * @TblRate)
              END 
          END 
        ELSE
          BEGIN
            SELECT @PremFromRateTbl = @PremOFAmount * @TblRate
          END
        SELECT @PremNew = @PremNew + @PremFromRateTbl
      END 

--PKG 6/28/2011--98927--Modified logic to use the amount from employee --multiplied by units, standard benefit hotfix

IF @PremPerUnit IS NOT NULL
SELECT @PremNew = @PremNew + (ISNULL(@UnitsNew,0) * ISNULL(@PremPerUnit,0)*@PremOFAmount)

    -- If nothing is SELECTed for "Per Amount"(@PremRatePer), use 1
    IF (@PremRatePer IS NULL OR @PremRatePer = 0)
      SELECT @PremRatePer = 1

    SELECT @PremNew = @PremNew / @PremRatePer 

    IF @PremFlatRate IS NOT NULL
      SELECT @PremNew = @PremNew + ISNULL(@PremFlatRate,0)

    IF @PremRounding IS NOT NULL AND @PremRoundAmt IS NOT NULL
      BEGIN
        SELECT @PremDirection = 
          CASE @PremRounding  
            WHEN 1 THEN 'Nearest'
            WHEN 2 THEN 'Up'
            WHEN 3 THEN 'Down'
          END
        SELECT @PremValue = @PremNew
EXECUTE dbo.Clc_Round @PremValue, @PremDirection, @PremRoundAmt, @PremRoundValue output

        SELECT @PremNew = @PremRoundValue
      END

    IF @PremMaximum <> 0
      BEGIN
        IF @PremNew > @PremMaximum
          SELECT @PremNew = @PremMaximum
      END
    IF @PremMinimum <> 0
      BEGIN
        IF @PremNew < @PremMinimum
          SELECT @PremNew = @PremMinimum
      END


    IF @PremCounter = 1 
      SELECT @CmpPremNew = @PremNew
    ELSE IF @PremCounter = 2 
      SELECT @EmpPremNew = @PremNew 
    ELSE IF @PremCounter = 3
      SELECT @TotPremNew = @PremNew 
    ELSE IF @PremCounter = 4 
      BEGIN 
        IF @PremiumCalc = 1
          SELECT @CmpPremNew = @TotPremNew - @EmpPremNew
        ELSE IF @PremiumCalc = 2
          SELECT @EmpPremNew = @TotPremNew - @CmpPremNew 
        ELSE
          SELECT @TotPremNew = @CmpPremNew + @EmpPremNew 

        SELECT @FlexCreditNew = 0
        IF @EmpPremFlx = 1 
          SELECT @FlexCreditNew = @FlexCreditNew + @EmpPremNew
        IF @CmpPremFlx = 1 
          SELECT @FlexCreditNew = @FlexCreditNew + @CmpPremNew
        IF @TotPremFlx = 1 
          SELECT @FlexCreditNew = @FlexCreditNew + @CmpPremNew + @EmpPremNew
        IF @FlatFlx = 1 
          SELECT @FlexCreditNew = @FlexCreditNew + @FlexCredits
        IF @CalSQLFlx = 1 AND ISNULL(@sSQL,'') <> ''
          BEGIN
  SELECT @tmpEnr = Enrsum FROM Ben WHERE Ben = @BenNew
            IF PatIndex('%WHERE%', @sSQL) > 0
  BEGIN
  IF PatIndex('%FROM%EmpEnrSum%WHERE%', @sSQL) > 0
    SELECT @sSQL = @sSQL + ' AND Emp.Emp = '''+@EmpNew+''' AND EmpEnrSum.EnrSum = ''' + @tmpEnr+''''
  ELSE
              SELECT @sSQL = @sSQL + ' AND Emp.Emp = '''+@EmpNew+''''
  END
            ELSE
  BEGIN
          IF PatIndex('%FROM%EmpEnrSum%', @sSQL) > 0
              SELECT @sSQL = @sSQL + ' WHERE Emp.Emp = '''+@EmpNew+''' AND EmpEnrSum.EnrSum = ''' + @tmpEnr+''''
          ELSE
              SELECT @sSQL = @sSQL + ' WHERE Emp.Emp = '''+@EmpNew+''''
           END
            INSERT INTO BenRteVal (RowVal,ColVal) Values ('0','0')
            SELECT @InsertedId = IDENT_CURRENT ('BenRteVal')
SELECT @sSQL = 'Update BenRteVal Set RowVal = ( '+@sSQL +') WHERE BenRteValId ='+ CONVERT(nVarChar(15), @InsertedId)
            EXEC (@sSQL)
            SELECT @FlexCreditNew = @FlexCreditNew + Convert(Money,RowVal) From BenRteVal WHERE BenRteValId = @InsertedId
            DELETE BenRteVal WHERE BenRteValId = @InsertedId 
          END
        IF @CalEmpPremFlx = 1 
          SELECT @FlexCreditNew = @FlexCreditNew + @PremNew
      END 

    SELECT @PremCounter = @PremCounter + 1 
  END
--Agent Clc_BenCovPrm Ends
      
