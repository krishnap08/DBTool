<!-- Form: EmpBenElgDepRvw -->
<!-- Scripts Inclusion Block Starts -->
<script name="EmpDepCombo" />
<script name="BenCombo" />
<!-- Scripts Inclusion Block Ends -->
<!-- Event Handlling Block Starts -->
<!-- Client Side Event Handling Block Starts -->

<event name="BeforeSave" where="Client">
  <native lang="Javascript">
<![CDATA[
  // Validate data before allowing save.
  v_Return = true;
  if (v_Return) {
    v_Return = checkAnnElectAmt();
  }
  if (v_Return) {
    v_Return = checkBenCovLvl("main", "Dep");
  }
  if (v_Return) {
    v_Return = checkBenCovLvl("PendBen", "PendBenDep");
  }
  if (v_Return) {
    v_Return = checkBnfPct("Bnf");
  }
  if (v_Return) {
    v_Return = checkBnfPct("PendBenBnf");
  }
]]>
  </native>
</event>

<event name="BeforeNext" where="Client">
  <native lang="Javascript">
<![CDATA[
  // Validate data before allowing save.
  v_Return = true;
  if (v_Return) {
    v_Return = checkAnnElectAmt();
  }
  if (v_Return) {
    v_Return = checkBenCovLvl("main", "Dep");
  }
  if (v_Return) {
    v_Return = checkBenCovLvl("PendBen", "PendBenDep");
  }
  if (v_Return) {
    v_Return = checkBnfPct("Bnf");
  }
  if (v_Return) {
    v_Return = checkBnfPct("PendBenBnf");
  }
]]>
  </native>
</event>

<event name="BeforePrev" where="Client">
  <native lang="Javascript">
<![CDATA[
  v_Return = checkBnfPct("Bnf");
  if (v_Return) {
    v_Return = checkBnfPct("PendBenBnf");
  }
  return v_Return;
]]>
  </native>
</event>

<event name="onChange" ctl="DepAnnElectAmt" where="Client">
  <native lang="Javascript">
    <![CDATA[
      var v_Return;
      var obj_N_AnnElectAmt=0;
      var obj_N_AnnElectMin=0;
      var obj_N_AnnElectMax=0;
      var obj_N_Ben;
      v_Return = true;
      var v_i = prm_sCtl.split("_")[SQROPEN]3[SQRCLOSE];

      if (ctlGetDef("N_DepAnnElectAmt_main_" + v_i)){
        obj_N_AnnElectAmt = NuStr.toNum(ctlGetVal("N_DepAnnElectAmt_main_" + v_i));
        obj_N_AnnElectMin = NuStr.toNum(ctlGetVal("N_DepAnnlAmtMin_main_"+v_i));
        obj_N_AnnElectMax = NuStr.toNum(ctlGetVal("N_DepAnnlAmtMax_main_"+v_i));
        obj_N_Ben = ctlGetVal("N_BenName_main_"+v_i);
        if(ctlGetVal("N_DepAnnElectAmt_main_" + v_i) == ""){
          obj_N_AnnElectAmt = 0;
        }
        if ((obj_N_AnnElectMax != 0) && (obj_N_AnnElectMin != 0) ) {
          if ((obj_N_AnnElectAmt < obj_N_AnnElectMin )|| (obj_N_AnnElectAmt > obj_N_AnnElectMax)) {
            msg("BenAmtMinMaxClient","Ben="+obj_N_Ben+"|Amt="+obj_N_AnnElectAmt+"|Min="+obj_N_AnnElectMin+"|Max="+obj_N_AnnElectMax);
            v_Return = false;
          }
        }
      }
    ]]>
  </native>
</event>
<event name="onChange" ctl="AnnElectAmt" where="Client">
  <native lang="Javascript">
    <![CDATA[
      var v_Return;
      var obj_N_AnnElectAmt;
      var obj_N_AnnElectMin;
      var obj_N_AnnElectMax;
      var obj_N_Ben;
      v_Return = true;
      var v_i = prm_sCtl.split("_")[SQROPEN]3[SQRCLOSE];
      obj_N_AnnElectAmt = NuStr.toNum(ctlGetVal("N_AnnElectAmt_main_" + v_i));
      obj_N_AnnElectMin = NuStr.toNum(ctlGetVal("N_AnnlAmtMin_main_"+v_i));
      obj_N_AnnElectMax = NuStr.toNum(ctlGetVal("N_AnnlAmtMax_main_"+v_i));
      obj_N_Ben = ctlGetVal("N_BenName_main_"+v_i);
      if(ctlGetVal("N_AnnElectAmt_main_" + v_i) == ""){
        obj_N_AnnElectAmt = 0;
      }
      if ((obj_N_AnnElectMax != "") && (obj_N_AnnElectMin != "") ) {
        if ((obj_N_AnnElectAmt < obj_N_AnnElectMin )|| (obj_N_AnnElectAmt > obj_N_AnnElectMax)) {
          msg("BenAmtMinMaxClient","Ben="+obj_N_Ben+"|Amt="+obj_N_AnnElectAmt+"|Min="+obj_N_AnnElectMin+"|Max="+obj_N_AnnElectMax);
          v_Return = false;
        }
      }

    ]]>
  </native>
</event>

<event name="global" where="Client">
  <native lang="Javascript">
<![CDATA[

  /**
   * Validates beneficiaries are setup correctly.
   * @return False if save should be prevented.
   */
  function checkBnfPct(prm_sDataset) {
    var v_iCnt = 0;
    var v_i = 0;
    var rCtl = "";
    var rCtlVal = "";
    var fPTot = 0.00;
    var fCTot = 0.00;
    var fBPct = 0.00;
    var iCCnt = 0;
    var iPCnt = 0;
    var sBen = "";
    var v_sDataset;
    var sPrevBen = "";
    var sMg = "";
    var v_Return = false;
    var v_isDone = false;
    v_sDataset = prm_sDataset;
    v_iCnt = ctlGetVal("F_RowCnt_" + v_sDataset);
    if (v_iCnt > 0) {
      sPrevBen = ctlGetVal("N_Ben_" + v_sDataset + "_1");
      v_i = 1;
      while(!v_isDone) {
        if (v_i <= v_iCnt) {
          sBen = ctlGetVal("N_Ben_" + v_sDataset + "_" + v_i);
        } else {
          v_isDone = true;
        }
        if (sBen != sPrevBen) {
          if ((iPCnt > 0) && (fPTot.toFixed(2) != 100)) {
            //REQ 567-LM-NV - Changed For New Message Functionality
            //sMg = "Total Percentage of all the Primary Beneficiaries is not 100%";
            sMg = "PrmBnfPer";
          } else if (iCCnt > 0 && iPCnt <= 0) {
            //REQ 567-LM-NV - Changed For New Message Functionality
            //sMg = "Contingency Beneficiaries cannot be selected without Primary Beneficiaries";
            sMg = "IsPrmExst";
          } else if ((iCCnt > 0) && (fCTot.toFixed(2) != 100)) {
            //REQ 567-LM-NV - Changed For New Message Functionality
            //sMg ="Contingency Beneficiary Percent must total 100%";
            sMg = "CntBnfPer";
          }
          if (sMg != "") {
            v_isDone = true;
          } else {
            fPTot = 0.0;
            fCTot = 0.0;
            iCCnt = 0;
            iPCnt = 0;
          }
        }
        if (!v_isDone) {
          rCtlVal = ctlGetVal("N_SysBnfSelect_" + v_sDataset + "_"+ v_i);
          if (rCtlVal=="Yes") {
            rCtlVal = ctlGetVal("N_Contingency_" + v_sDataset + "_"+ v_i);
            fBPct = parseFloat(ctlGetVal("N_BnfPct_" + v_sDataset + "_"+ v_i));
            if (rCtlVal == "Yes") {
              fCTot = parseFloat(fCTot)+parseFloat(fBPct);
              iCCnt = iCCnt + 1;
            } else {
              fPTot = parseFloat(fPTot )+parseFloat(fBPct);
              iPCnt = iPCnt + 1;
            }
          }
          v_i += 1;
          sPrevBen = sBen;
          sBen = "";
        }
      }
      if (sMg != "") {
        /*
        * 41543-LM-NV: Fix For Error Message Appears OnClick Of MsgOk
        # The no. of times the while loop executes is (Dataset_RownCnt + 1).
        # When the msg function (XHtmlMessages.js) was trying to get the control with index (Dataset_RownCnt + 1) it was throing an error.
        * v_iCnt, which is Dataset_RownCnt, used instead of v_i.
        */
        //msg("Beneficiary Percentage Error","msgtext="+sMg,"N_BnfPct_" + v_sDataset + "_" + v_iCnt);
        msg(sMg, "", "N_BnfPct_" + v_sDataset + "_" + v_iCnt);
        v_Return = false;
      } else {
        v_Return = true;
      }
    } else {
      v_Return = true;
    }
    return v_Return;
  }

  /**
   * Check max and min amounts FSA elections.
   */
  function checkAnnElectAmt()
  {
    var v_Return;
    var v_iCnt;
    var obj_N_Ben;

    v_Return = true;
    v_iCnt = ctlGetVal("F_RowCnt_main");
    for (var v_i = 1; v_i <= v_iCnt; v_i++) {
      var obj_N_AnnElectAmt =0;
      var obj_N_AnnElectMin =0;
      var obj_N_AnnElectMax = 0;
      obj_N_Ben = ctlGetVal("N_BenName_main_"+v_i);
      if  (ctlGetDef("N_AnnElectAmt_main_" + v_i)){
        obj_N_AnnElectAmt = NuStr.toNum(ctlGetVal("N_AnnElectAmt_main_" + v_i));
        obj_N_AnnElectMin = NuStr.toNum(ctlGetVal("N_AnnlAmtMin_main_"+v_i));
        obj_N_AnnElectMax = NuStr.toNum(ctlGetVal("N_AnnlAmtMax_main_"+v_i));
        if (ctlGetVal("N_AnnElectAmt_main_" + v_i) =="")
          obj_N_AnnElectAmt = 0;
        if ((obj_N_AnnElectMax != 0) && (obj_N_AnnElectMin != 0) ) {
          if ((obj_N_AnnElectAmt < obj_N_AnnElectMin )|| (obj_N_AnnElectAmt > obj_N_AnnElectMax)) {
            msg("BenAmtMinMaxClient","Ben="+obj_N_Ben+"|Amt="+obj_N_AnnElectAmt+"|Min="+obj_N_AnnElectMin+"|Max="+obj_N_AnnElectMax);
            v_Return = false;
          }
        }
      }

      if  (ctlGetDef("N_DepAnnElectAmt_main_" + v_i)){
        obj_N_AnnElectAmt = NuStr.toNum(ctlGetVal("N_DepAnnElectAmt_main_" + v_i));
        obj_N_AnnElectMin = NuStr.toNum(ctlGetVal("N_DepAnnlAmtMin_main_"+v_i));
        obj_N_AnnElectMax = NuStr.toNum(ctlGetVal("N_DepAnnlAmtMax_main_"+v_i));
        if (ctlGetVal("N_DepAnnElectAmt_main_" + v_i) =="")
          obj_N_AnnElectAmt = 0;
        if ((obj_N_AnnElectMax != 0) && (obj_N_AnnElectMin != 0) ) {
          if ((obj_N_AnnElectAmt < obj_N_AnnElectMin )|| (obj_N_AnnElectAmt > obj_N_AnnElectMax)) {
            msg("BenAmtMinMaxClient","Ben="+obj_N_Ben+"|Amt="+obj_N_AnnElectAmt+"|Min="+obj_N_AnnElectMin+"|Max="+obj_N_AnnElectMax);
            v_Return = false;
          }
        }
      }
    }

    return v_Return;
  }


  /**
   * Validate Selected Number Of Dependents Complies With The Allowed Number Of Dependents
   * If Not Give Notification
   * If the number of selected dependents is zero, let it pass without a notification.
   * i.e.
   * If Allowed Number Of Dependent Is "0" Then Selected Number Of Dependent Must Be ZERO
   * If Allowed Number Of Dependent Is "1" Then Selected Number Of Dependent Must Be ONE Or No Dependent Selected(i.e. ZERO)
   * If Allowed Number Of Dependent Is "1+" Then Selected Number Of Dependent Must Be ONE Or Greater Than ONE Or No Dependent Selected(i.e. ZERO)
   * If Allowed Number Of Dependent Is "2" Then Selected Number Of Dependent Must Be TWO Or No Dependent Selected(i.e. ZERO)
   * If Allowed Number Of Dependent Is "2+" Then Selected Number Of Dependent Must Be Two Or Greater Than Two Or No Dependent Selected(i.e. ZERO)
   *
   * @return False if save should be prevented.
  */
  function checkBenCovLvl(prm_sEmpDataset, prm_sDepDataset)
  {
    var v_Return = true;

    var selectedDeps = getSelectedDeps(prm_sDepDataset)

    var iRowCnt = ctlGetVal("F_RowCnt_" + prm_sEmpDataset);
    for (var iRow = 1; iRow <= iRowCnt; iRow++)
    {
      var benCode = ctlGetVal("N_Ben_" + prm_sEmpDataset + "_" + iRow);
      var allowedNumDeps = ctlGetVal("N_AllowNumDeps_" + prm_sEmpDataset + "_" + iRow);
      var deps = selectedDeps[SQROPEN]benCode[SQRCLOSE];

      if (!deps || deps.length == 0) {
        // Having no deps is always allowed (per requirements)
      }
      else if (allowedNumDeps == "") {
        // Unspecified coverage level allowance means no message.
      }
      else if (allowedNumDeps == "0" && deps.length != 0) {
        v_Return = false;
      }
      else if (allowedNumDeps == "1" && deps.length != 1) {
        v_Return = false;
      }
      else if (allowedNumDeps == "1+" && deps.length < 1) {
        v_Return = false;
      }
      else if (allowedNumDeps == "2" && deps.length != 2) {
        v_Return = false;
      }
      else if (allowedNumDeps == "2+" && deps.length < 2) {
        v_Return = false;
      }

      if (v_Return == false) {
        var benName = ctlGetVal("N_BenName_" + prm_sEmpDataset + "_" + iRow);
        msg("DepNotEqlCov", "BenName=" + benName);
        break;
      }

    }

    return v_Return;
  }


  /**
   * Gets data on the SELECTED dependents of all benefits.
   *
   * @param prm_sDataset Name of the datasheet containing dependents.
   *  Assumes the controls "Ben" and "SysDepSelect" exist for this datasheet.
   * @return A map of Ben -> Array-of-dependents.
   */
  function getSelectedDeps(prm_sDataset)
  {
    var v_Return = {};

    var iRowCnt = ctlGetVal("F_RowCnt_" + prm_sDataset);
    for (var iRow = 1; iRow <= iRowCnt; iRow++) {
      var isSelected = ctlGetVal("N_SysDepSelect_" + prm_sDataset + "_" + iRow);
      if (isSelected == "Yes") {
        var sSelectedBen = ctlGetVal("N_Ben_" + prm_sDataset + "_" + iRow);
        var sDepRelation = ctlGetVal("N_DepRelation_" + prm_sDataset + "_" + iRow);
        var depList = v_Return[SQROPEN]sSelectedBen[SQRCLOSE];
        if (!depList) {
          depList = new Array();
        v_Return[SQROPEN]sSelectedBen[SQRCLOSE] = depList;
        }
        depList.push({
          row: iRow,
          relation: sDepRelation
        });
      }
    }

    return v_Return;
  }


]]>
  </native>
</event>
<!-- Client Side Event Handling Block Ends -->

<!-- Server Side Event Handling Block Starts -->
<event name="onLoad" where="Server">
  <!-- Construct variables to be used in main, dep, bnf datasets to filter results to desired enrollment periods. -->
  <if xml="Run">
    <when>
      <eq>
        <val>[P_enroll]</val>
        <val>current</val>
      </eq>
    </when>
    <then>
      <!-- Fetch enrollment periods effective as-of today -->
      <set var="[JoinClause]">
        <and xml="keep">
          <eq>
            <fld name="EmpEnrSum.EnrSum" />
            <fld name="EnrSum.EnrSum" />
          </eq>
          <le>
            <fld name="EnrStartDt" type="datetime" />
            <val>[DateTime]</val>
          </le>
          <ge>
            <fld name="EnrEndDt" type="datetime" />
            <val>[DateTime]</val>
          </ge>
        </and>
      </set>
      <set var="[InnerClause]">INNER JOIN EnrSum ON EnrSum.EnrSum=EmpEnrSum.EnrSum AND EnrStartDt [LT]= getDate() AND EnrEndDt [GT]= getDate()</set>
    </then>
    <else>
      <!-- Fetch enrollment periods where the OEEndDt is in the future -->
      <set var="[JoinClause]">
        <and xml="keep">
          <ge>
            <fld name="OEEndDt" type="datetime" />
            <val>[DateTime]</val>
          </ge>
        </and>
      </set>
      <set var="[InnerClause]">INNER JOIN EnrSum ON EnrSum.EnrSum=EmpEnrSum.EnrSum AND OEEndDt [GT]= getDate()</set>
    </else>
  </if>

  <!-- Some strange behavior here to parse navpfind to find out the Emp to display.  Reason for this code is unknown. -->
  <!-- SH:Commented - This code was present in EmpBenElgDepRvw prior to merger with EmpBenDepRvw, but I don't see a good reason for it to exist.
    The java layer ought to handle parsing of the navpfind or wizard find variables on its own.

  <set var="[NavID]">
    <stringpart>
      <orig>[F_NavPfind]</orig>
      <after>&lt;val&gt;</after>
      <before>&lt;/val&gt;</before>
    </stringpart>
  </set>
  <if xml="Run">
    <when>
      <eq>
        <val>[F_Application]</val>
        <val>ESS</val>
      </eq>
    </when>
    <then>
      <set var="[EmpVal]">[S_SecEmp]</set>
    </then>
    <else>
      <datasetopen dataset="EmpDS" />
      <datasetnext dataset="EmpDS" />
      <set var="[EmpVal]">[fld_EmpDS.Emp]</set>
      <datasetclose dataset="EmpDS" />
    </else>
  </if>
  -->
</event>

<event name="AfterSave" where="Server">

  <!--
    Procedure for this AfterSave event:
    1. Save dependent changes to EmpBenElgDep for Pending and Non-Pending benefits.
      If the box is unchecked, the EmpBenElgDep record is deleted.
    2. Save beneficiary changes to EmpBenElgBnf for Pending and Non-Pending benefits.
      If the box is unchecked, the EmpBenElgBnf record is deleted.
    3. Save any Units changes in pending benefits to EmpBenElg
      Note: Non-pending benefit fields were saved to EmpBenElg during the native save.
    4. IF we are not in a wizard, and not in OE, then call empbenenroll to merge changes into the EmpBen, EmpBenDep, and EmpBenBnf tables.
  -->

    <foreach dataset="Dep" type="controls">

      <if>
        <!-- Selecting previously unselected - INSERT, or change to existing - UPDATE -->
        <when>
          <and>
            <eq>
              <val>[N_SysDepSelect_Dep_[controlrow]]</val>
              <val>Yes</val>
            </eq>
            <or>
              <eq>
                <val>[O_SysDepSelect_Dep_[controlrow]]</val>
                <val>No</val>
              </eq>
              <ne>
                <val>[N_DepPhysician_Dep_[controlrow]]</val>
                <val>[O_DepPhysician_Dep_[controlrow]]</val>
              </ne>
              <ne>
                <val>[N_DepBenStartDt_Dep_[controlrow]]</val>
                <val>[O_DepBenStartDt_Dep_[controlrow]]</val>
              </ne>
            </or>
          </and>
        </when>
        <then>

          <!-- Read necessary info from the parent row -->
          <set var="[VarEmpBenElgEffDt]" type="Date">[N_EmpBenElgEffDt_[N_ParentRow_Dep_[controlrow]]]</set>
          <!-- We must save to a variable in order to do date comparison, because <val> does not support typing outside of a dataset. -->
          <set var="[VarStartDt]" type="Date">[N_DepBenStartDt_Dep_[controlrow]]</set>

          <!-- For EmpBenElgDepEffDt, use EmpBenElgEffDt or DepBenStartDt, whichever is greater -->
          <if>
            <when>
              <gt>
                <val type="Date">[VarStartDt]</val>
                <val type="Date">[VarEmpBenElgEffDt]</val>
              </gt>
            </when>
            <then><set var="[VarDepEffDt]">[VarStartDt]</set></then>
            <else><set var="[VarDepEffDt]">[VarEmpBenElgEffDt]</set></else>
          </if>

          <update dataset="DepUpdate">
            <data>
              <row>
                <fld name="EmpBenElgDepId">[N_SysElgDepId_Dep_[controlrow]]</fld>
                <fld name="Emp">[N_Emp_Dep_[controlrow]]</fld>
                <fld name="Eml">[N_Eml_Dep_[controlrow]]</fld>
                <fld name="Ben">[N_Ben_Dep_[controlrow]]</fld>
                <fld name="Dep">[N_Dep_Dep_[controlrow]]</fld>
                <fld name="DepPhysician">[N_DepPhysician_Dep_[controlrow]]</fld>
                <fld name="DepBenEligibleDt">[N_EligibleDt_Dep_[controlrow]]</fld>
                <fld name="DepBenStartDt">[N_DepBenStartDt_Dep_[controlrow]]</fld>
                <fld name="EmpBenElgDepEffDt">[VarDepEffDt]</fld>
              </row>
            </data>
          </update>

        </then>

        <!-- Unselecting previously selected - DELETE -->
        <when>
          <and>
            <ne>
              <val>[N_SysDepSelect_Dep_[controlrow]]</val>
              <val>Yes</val>
            </ne>
            <eq>
              <val>[O_SysDepSelect_Dep_[controlrow]]</val>
              <val>Yes</val>
            </eq>
          </and>
        </when>
        <then>

          <delete dataset="DepUpdate">
            <data>
              <row>
                <fld name="EmpBenElgDepId">[N_SysElgDepId_Dep_[controlrow]]</fld>
              </row>
            </data>
          </delete>

        </then>
      </if>
    </foreach>

    <foreach dataset="Bnf" type="controls">

      <if>
        <!-- Selecting previously unselected - INSERT, or change to existing - UPDATE -->
        <when>
          <and>
            <eq>
              <val>[N_SysBnfSelect_Bnf_[controlrow]]</val>
              <val>Yes</val>
            </eq>
            <or>
              <eq>
                <val>[O_SysBnfSelect_Bnf_[controlrow]]</val>
                <val>No</val>
              </eq>
              <ne>
                <val>[N_BnfPct_Bnf_[controlrow]]</val>
                <val>[O_BnfPct_Bnf_[controlrow]]</val>
              </ne>
              <ne>
                <val>[N_Contingency_Bnf_[controlrow]]</val>
                <val>[O_Contingency_Bnf_[controlrow]]</val>
              </ne>
              <ne>
                <val>[N_EmpBenBnfStartDt_Bnf_[controlrow]]</val>
                <val>[O_EmpBenBnfStartDt_Bnf_[controlrow]]</val>
              </ne>
            </or>
          </and>
        </when>
        <then>

          <!-- Read necessary info from the parent row -->
          <set var="[VarEmpBenElgEffDt]" type="Date">[N_EmpBenElgEffDt_[N_ParentRow_Bnf_[controlrow]]]</set>
          <!-- We must save to a variable in order to do date comparison, because <val> does not support typing outside of a dataset. -->
          <set var="[VarStartDt]" type="Date">[N_EmpBenBnfStartDt_Bnf_[controlrow]]</set>


          <!-- For EmpBenElgBnfEffDt, use EmpBenElgEffDt or EmpBenBnfStartDt, whichever is greater -->
          <if>
            <when>
              <gt>
                <val>[VarStartDt]</val>
                <val>[VarEmpBenElgEffDt]</val>
              </gt>
            </when>
            <then><set var="[VarBnfEffDt]">[VarStartDt]</set></then>
            <else><set var="[VarBnfEffDt]">[VarEmpBenElgEffDt]</set></else>
          </if>

          <update dataset="BnfUpdate">
            <data>
              <row>
                <fld name="EmpBenElgBnfId">[N_SysElgBnfId_Bnf_[controlrow]]</fld>
                <fld name="Emp">[N_Emp_Bnf_[controlrow]]</fld>
                <fld name="Eml">[N_Eml_Bnf_[controlrow]]</fld>
                <fld name="Ben">[N_Ben_Bnf_[controlrow]]</fld>
                <fld name="BnfNum">[N_BnfNum_Bnf_[controlrow]]</fld>
                <fld name="BnfPct">[N_BnfPct_Bnf_[controlrow]]</fld>
                <fld name="Contingency">[N_Contingency_Bnf_[controlrow]]</fld>
                <fld name="EmpBenBnfStartDt">[N_EmpBenBnfStartDt_Bnf_[controlrow]]</fld>
                <fld name="EmpBenElgBnfEffDt">[VarBnfEffDt]</fld>
              </row>
            </data>
          </update>

        </then>

        <!-- Unselecting previously selected - DELETE -->
        <when>
          <and>
            <ne>
              <val>[N_SysBnfSelect_Bnf_[controlrow]]</val>
              <val>Yes</val>
            </ne>
            <eq>
              <val>[O_SysBnfSelect_Bnf_[controlrow]]</val>
              <val>Yes</val>
            </eq>
          </and>
        </when>
        <then>

          <delete dataset="BnfUpdate">
            <data>
              <row>
                <fld name="EmpBenElgBnfId">[N_SysElgBnfId_Bnf_[controlrow]]</fld>
              </row>
            </data>
          </delete>

        </then>
      </if>
    </foreach>


  <!-- Commit changes to child records, so they don't rollback even if merge fails for some reason -->
  <commit />

  <!-- 36177-LM-NV update and process Pending benefits -->
  <set var="[ProcessBen]">No</set>
  <set var="[incr]">0</set>
   <foreach dataset="PendBen" type="controls">
   <!--idx should be 2n-1 == controlrow =1, idx should be 1 when controlrow =2, idx should be 3 -->
  <set var="[idx]"><add><val>[controlrow]</val><val>[incr]</val></add></set>
  <set var="[incr]"><add><val>[incr]</val><val>1</val></add></set>

    <if>
     <when>
   <and>
    <eq>
         <val>[N_PendBen_PendBen_[idx]]</val>
         <val>No</val>
        </eq>
    <eq>
         <val>[O_PendBen_PendBen_[idx]]</val>
         <val>Yes</val>
        </eq>
    </and>
     </when>
     <then>
      <set var="[ProcessBen]">Yes</set>
      <set var="[Emp]">[N_Emp_PendBen_[idx]]</set>
      <set var="[PendBen]">No</set>
     </then>
     <when>
        <eq>
         <val>[N_PendBen_PendBen_[idx]]</val>
         <val>[O_PendBen_PendBen_[idx]]</val>
        </eq>
     </when>
     <then>
      <set var="[ProcessBen]">Yes</set>
      <set var="[Emp]">[N_Emp_PendBen_[idx]]</set>
      <set var="[PendBen]">Yes</set>
    </then>
    </if>
    <update dataset="PendBenUpdate">
       <data>
        <row>
          <fld name="EmpBenElgId">[F_Id_PendBen_[controlrow]]</fld>
          <fld name="PendBen">[PendBen]</fld>
          <fld name="Units">[N_Units_PendBen_[idx]]</fld>
        </row>
       </data>
    </update>
  </foreach>

  <!-- TODO - Should we always run this for HR, or only if something changed? How do we find if something on EmpBenElg (non-pending) changed? -->
  <if>
    <when>
      <and>
        <ne>
          <val>[F_Flow]</val>
          <val>Wizards</val>
        </ne>
        <eq>
          <val>[P_enroll]</val>
          <val>current</val>
        </eq>
        <ne>
          <val>[N_Emp_main_1]</val>
          <val></val>
        </ne>
      </and>
    </when>
    <then>
      <!-- Enroll EmpBenElg records into EmpBen -->
      <ifnoerror>
        <empbenenroll>
          <Emp>[N_Emp_main_1]</Emp>
          <Action>CREATE_HIST_DEL_AFTER_NOW</Action>
        </empbenenroll>
      </ifnoerror>
    </then>
  </if>

</event>
<!-- Server Side Event Handling Block Ends -->

<!-- Event Handling Block Ends -->
<!-- Dataset Definition Block Starts -->

<dataset name="main">
  <tables>
    <tbl name="Emp" />
    <!-- 47409-LM-NV: Join with Eml table added to goup the records by Eml -->
    <tbl name="Eml" join="LEFT" to="Emp">
      <and>
        <eq>
          <fld name="Eml.IsPrm" />
          <val>1</val>
        </eq>
        <eq>
          <fld name="Emp.Emp" />
          <fld name="Eml.Emp" />
        </eq>
        <isnull>
          <fld name="Eml.EmlEfdDt" />
        </isnull>
      </and>
    </tbl>
    <tbl name="EmpEnrSum [InnerClause]" join="LEFT" to="Emp">
      <and>
        <eq>
          <fld name="EmpEnrSum.Emp" />
          <fld name="Emp.Emp" />
        </eq>
        <!-- 47409-LM-NV: Code Adde To Handle Multiple Eml With Same EnrTyp -->
        <eq>
          <fld name="EmpEnrSum.Eml" />
          <fld name="Eml.Eml" />
        </eq>
      </and>
    </tbl>
    <tbl name="EmpBenElg" main="Yes" join="RIGHT" to="EmpEnrSum">
      <and>
        <eq>
          <fld name="EmpEnrSum.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <eq>
          <fld name="EmpEnrSum.Eml" />
          <fld name="EmpBenElg.Eml" />
        </eq>
        <isnull>
          <fld name="EmpBenElgEfdDt" />
        </isnull>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
        <eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>No</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="INNER">
      <and>
        <eq>
          <fld name="Ben.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="Ben.EnrSum" />
          <fld name="EnrSum.EnrSum" />
        </eq>
      </and>
    </tbl>
    <tbl name="BenCovLvl" join="LEFT" to="Ben">
      <eq>
        <fld name="Ben.PeopleCovered" />
        <fld name="BenCovLvl.BenCovLvl" />
      </eq>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="BenPln.PlanType" />
        <fld name="PlnTyp.PlnTyp" />
      </eq>
    </tbl>
    <!-- 47409-LM-NV: Join with PayGrp and Job table added to display in the header -->
    <tbl name="Job" join="LEFT" to="Eml">
      <and>
        <eq>
          <fld name="Eml.Job" />
          <fld name="Job.Job" />
        </eq>
        <isnull>
          <fld name="Job.JobEfdDt" />
        </isnull>
      </and>
    </tbl>
    <tbl name="PayGrp" join="LEFT" to="Eml">
      <and>
        <eq>
          <fld name="Eml.PayGrp" />
          <fld name="PayGrp.PayGrp" />
        </eq>
        <isnull>
          <fld name="PayGrp.PayGrpEfdDt" />
        </isnull>
      </and>
    </tbl>
  </tables>
  <display>
    <fld name="EmpBenElg.*" />
    <fld name="Eml.PayGrp" />
    <fld name="AnnElectAmt" origname="ISNULL(EmpBenElg.AnnElectAmt, 0)" />
    <fld name="DepAnnElectAmt" origname="ISNULL(EmpBenElg.DepAnnElectAmt, 0)" />
    <fld name="EnrSum.EnrSum" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
            <![CDATA[
              RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
            ]]>
      </native>
    </fld>
    <fld name="PlnTyp.PlnTypName" />
    <fld name="PlnTyp.PlnTypDesc" />
    <fld name="Ben.BenName" />
    <fld name="Ben.BenCur" />
    <fld name="Ben.IsEmpPremEmpAmt" />
    <fld name="Ben.IsEmpCovEmpAmt" />
    <fld name="Ben.IsCmpPremEmpAmt" />
    <fld name="Ben.IsCmpCovEmpAmt" />
    <fld name="Ben.IsTotPremEmpAmt" />
    <fld name="Ben.IsTotCovEmpAmt" />
    <fld name="Ben.IsFlxCrdEmpAmt" />
    <fld name="EnrSum.EnrStartDt" />
    <fld name="EnrSum.EnrEndDt" />
    <fld name="Ben.BenDesc" />
    <fld name="BenPln.DescLnk" />
    <fld name="BenPln.AnnlAmtMin" />
    <fld name="BenPln.AnnlAmtMax" />
    <fld name="BenPln.DepAnnlAmtMin" />
    <fld name="BenPln.DepAnnlAmtMax" />
    <fld name="BenPln.InsCar" />
    <fld name="BenPln.FSAAllow" />
    <fld name="BenPln.FSADepAllow" />
    <fld name="Ben.DepAllow" />
    <fld name="Ben.BenAllow" />
    <fld name="Ben.PeopleCovered" />
    <fld name="BenPln.ClmAllow" />
    <fld name="BenPln.UntAllow" />
    <fld name="BenPln.PCPAllow" />
    <fld name="BenCovLvl.AllowNumDeps" />
    <fld name="BenCovLvl.BenCovLvlDesc" />
      <fld name="BenCovLvl.BenCovLvl" />
    <fld name="EmpName">
      <append>
        <fld name="Emp.LastName" type="String" />
        <val>, </val>
        <fld name="Emp.FirstName" type="String" />
      </append>
    </fld>
    <script name="EmpHeaderFlds" />
    <!-- 47409-LM-NV: Fields from Eml table added -->
    <script name="EmlHeaderFlds" />
  </display>

  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="Ben.EnrSum" />
    <fld name="EmlVal" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
  </order>
  <includehistory>Yes</includehistory>
</dataset>

<dataset name="Bnf">
  <tables>
    <tbl name="EmpDep" />
    <tbl name="EmpEnrSum [InnerClause]" join="LEFT" to="EmpDep">
      <and>
        <eq>
          <fld name="EmpEnrSum.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
      </and>
    </tbl>
    <tbl name="EmpBenElg" join="RIGHT" to="EmpEnrSum">
      <and>
        <eq>
          <fld name="EmpBenElg.Emp" />
          <fld name="EmpEnrSum.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElg.Eml" />
          <fld name="EmpEnrSum.Eml" />
        </eq>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
	<eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>No</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="LEFT">
      <and>
        <eq>
          <fld name="Ben.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="Ben.EnrSum" />
          <fld name="EnrSum.EnrSum" />
        </eq>
      </and>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="PlnTyp.PlnTyp" />
        <fld name="BenPln.PlanType" />
      </eq>
    </tbl>
    <tbl name="EmpBenElgBnf" main="Yes" join="LEFT">
      <and>
        <eq>
          <fld name="EmpBenElgBnf.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.Eml" />
          <fld name="EmpBenElg.Eml" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.BnfNum" />
          <fld name="EmpDep.Dep" />
        </eq>

      </and>
    </tbl>
  </tables>
  <display>
    <fld name="EmpDep.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpBenElg.EmpBenElgEffDt" />
    <fld name="EmpDep.Dep" />
    <fld name="EmpDep.Beneficiary" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
            <![CDATA[
              RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
            ]]>
      </native>
    </fld>
    <fld name="EnrSum.EnrSum" />
    <fld name="BnfPct" />
    <fld name="Contingency" />
    <fld name="EmpBenBnfStartDt" />
    <fld name="EmpBenElgBnfEffDt">
      <native lang="SQLServer">
        <![CDATA[
CASE WHEN GetDate() < EmpBenElgEffDt THEN EmpBenElgEffDt
ELSE GetDate() END
        ]]>
      </native>
    </fld>
    <fld name="EmpBenElgBnfEfdDt" />
    <fld name="EmpBenElgBnf.EmpBenElgBnfId" />
    <fld name="EmpBenElgBnf.EmpBenElgBnfDt" />
    <fld name="EmpBenElgBnf.BnfNum" />
    <fld name="BnfName">
      <append>
        <fld name="EmpDep.DepLastName" type="String" />
        <val>, </val>
        <fld name="EmpDep.DepFirstName" type="String" />
      </append>
    </fld>
    <fld name="BnfSelect">
      <native lang="SQLServer">
        <![CDATA[
        CASE WHEN NOT EmpBenElgBnf.BnfNum IS NULL AND (EmpBenElgBnf.EmpBenElgBnfEfdDt IS NULL OR EmpBenElgBnf.EmpBenElgBnfEfdDt  >= GetDate())
        THEN 'Yes' ELSE 'No' END
        ]]>
      </native>
    </fld>
  </display>
  <where>
    <and>
      <eq>
        <fld name="EmpDep.Emp" type="String" />
        <val>[fld_main.Emp]</val>
      </eq>
      <eq>
        <fld name="EmpDep.Beneficiary" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="BenPln.BenAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="Ben.BenAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
    </and>
  </where>
  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="Ben.EnrSum" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
  </order>
  <synchronize dataset="main">
    <if>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Bnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Bnf.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Bnf.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Bnf.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Bnf.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Bnf.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Keep</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Bnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Bnf.Eml]</val>
          </eq>
          <gt>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Bnf.EnrSum]</val>
          </gt>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Bnf.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Bnf.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Bnf.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Bnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Bnf.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Bnf.EnrSum]</val>
          </eq>
          <gt>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Bnf.PlnOrd]</val>
          </gt>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Bnf.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Bnf.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Bnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Bnf.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Bnf.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Bnf.PlnOrd]</val>
          </eq>
          <gt>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Bnf.PlnTyp]</val>
          </gt>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Bnf.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Bnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Bnf.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Bnf.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Bnf.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Bnf.PlnTyp]</val>
          </eq>
          <gt>
            <val>[fld_main.Ben]</val>
            <val>[fld_Bnf.Ben]</val>
          </gt>
        </and>
      </when>
      <then>Skip</then>
      <else>Stop</else>
    </if>
  </synchronize>
  <includehistory>Yes</includehistory>
</dataset>

<dataset name="Dep">
  <tables>
    <tbl name="EmpDep" />
    <tbl name="EmpEnrSum [InnerClause]" join="LEFT" to="EmpDep">
      <and>
        <eq>
          <fld name="EmpEnrSum.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
      </and>
    </tbl>
    <tbl name="EmpBenElg" join="RIGHT" to="EmpEnrSum">
      <and>
        <eq>
          <fld name="EmpBenElg.Emp" />
          <fld name="EmpEnrSum.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElg.Eml" />
          <fld name="EmpEnrSum.Eml" />
        </eq>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
        <eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>No</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="LEFT">
      <and>
        <eq>
          <fld name="Ben.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="Ben.EnrSum" />
          <fld name="EnrSum.EnrSum" />
        </eq>
      </and>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="PlnTyp.PlnTyp" />
        <fld name="BenPln.PlanType" />
      </eq>
    </tbl>
    <tbl name="EmpBenElgDep" main="Yes" join="LEFT">
      <and>
        <eq>
          <fld name="EmpBenElgDep.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Dep" />
          <fld name="EmpDep.Dep" />
        </eq>
        <eq>
          <fld name="EmpDep.Dependent" type="YesNo" />
          <val type="YesNo">Yes</val>
        </eq>
        <eq>
          <fld name="EmpDep.BenPart" type="YesNo" />
          <val type="YesNo">Yes</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Rel" join="LEFT" to="EmpDep">
      <eq>
        <fld name="Rel.Rel" />
        <fld name="EmpDep.DepRelation" />
      </eq>
    </tbl>
    <tbl name="RelCvgLvl" join="LEFT" to="Rel">
      <and>
        <eq>
          <fld name="Rel.Rel" />
          <fld name="RelCvgLvl.Rel" />
        </eq>
        <eq>
          <fld name="RelCvgLvl.RelCvgLvl" />
          <fld name="Ben.PeopleCovered" />
        </eq>
      </and>
    </tbl>
  </tables>
  <display>
    <fld name="EmpDep.Emp" />
    <fld name="EnrSum.EnrSum" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
            <![CDATA[
              RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
            ]]>
      </native>
    </fld>
    <fld name="EmpBenElg.Eml" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpBenElg.EmpBenElgEffDt" />
    <fld name="EmpBenElg.EmpBenElgEfdDt" />
    <fld name="EmpDep.Dep" />
    <fld name="EmpDep.DepRelation" />
    <fld name="EmpBenElgDep.DepPhysician" />
    <fld name="EmpBenElgDepEffDt">
      <native lang="SQLServer">
        <![CDATA[
          CASE WHEN GetDate() < EmpBenElgEffDt THEN EmpBenElgEffDt
          ELSE GetDate() END
        ]]>
      </native>
    </fld>
    <fld name="EmpBenElgDepEfdDt" />
    <fld name="EmpBenElgDep.DepBenStartDt" />
    <fld name="EmpBenElgDep.DepBenEndDt" />
    <fld name="EmpBenElgDep.EmpBenElgDepId" />
    <fld name="EmpBenElgDep.EmpBenElgDepDt" />
    <fld name="DepName">
      <append>
        <fld name="EmpDep.DepLastName" type="String" />
        <val>, </val>
        <fld name="EmpDep.DepFirstName" type="String" />
      </append>
    </fld>
    <fld name="DepSelect">
      <native lang="SQLServer">
        CASE WHEN NOT EmpBenElgDep.Dep IS NULL AND EmpBenElgDep.EmpBenElgDepEfdDt IS NULL THEN 'Yes' ELSE 'No' END
      </native>
    </fld>
  </display>
  <where>
    <and xml="keep">
      <eq>
        <fld name="EmpDep.Emp" type="String" />
        <val>[fld_main.Emp]</val>
      </eq>
      <eq>
        <fld name="EmpDep.Dependent" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="EmpDep.BenPart" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="BenPln.DepAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="Ben.DepAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <or>
        <isnull>
          <fld name="Ben.PeopleCovered" />
        </isnull>
        <eq>
          <fld name="RelCvgLvl.RelCvgLvl" />
          <fld name="Ben.PeopleCovered" />
        </eq>
      </or>
    </and>
  </where>
  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="Ben.EnrSum" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
  </order>
  <synchronize dataset="main">
    <if>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Dep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Dep.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Dep.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Dep.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Dep.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Dep.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Keep</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Dep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Dep.Eml]</val>
          </eq>
          <gt>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Dep.EnrSum]</val>
          </gt>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Dep.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Dep.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Dep.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Dep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Dep.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Dep.EnrSum]</val>
          </eq>
          <gt>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Dep.PlnOrd]</val>
          </gt>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Dep.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Dep.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Dep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Dep.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Dep.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Dep.PlnOrd]</val>
          </eq>
          <gt>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Dep.PlnTyp]</val>
          </gt>
          <eq>
            <val>[fld_main.Ben]</val>
            <val>[fld_Dep.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Skip</then>
      <when>
        <and>
          <eq>
            <val>[fld_main.Emp]</val>
            <val>[fld_Dep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_main.Eml]</val>
            <val>[fld_Dep.Eml]</val>
          </eq>
          <eq>
            <val>[fld_main.EnrSum]</val>
            <val>[fld_Dep.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnOrd]</val>
            <val>[fld_Dep.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_main.PlnTyp]</val>
            <val>[fld_Dep.PlnTyp]</val>
          </eq>
          <gt>
            <val>[fld_main.Ben]</val>
            <val>[fld_Dep.Ben]</val>
          </gt>
        </and>
      </when>
      <then>Skip</then>
      <else>Stop</else>
    </if>
  </synchronize>
  <includehistory>Yes</includehistory>
</dataset>

<!-- 36177-LM-NV added for Pending Benefits Section -->
<dataset name="PendBen">
  <tables>
    <tbl name="Emp" />
    <tbl name="EmpBenElg" join="RIGHT" to="Emp" main="Yes">
      <and>
        <eq>
          <fld name="Emp.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <isnull>
          <fld name="EmpBenElg.EmpBenElgEfdDt" />
        </isnull>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
        <eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>Yes</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="LEFT">
      <eq>
        <fld name="Ben.Ben" />
        <fld name="EmpBenElg.Ben" />
      </eq>
    </tbl>
    <tbl name="EnrSum" join="LEFT">
      <eq>
        <fld name="Ben.EnrSum" />
        <fld name="EnrSum.EnrSum" />
      </eq>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="BenPln.PlanType" />
        <fld name="PlnTyp.PlnTyp" />
      </eq>
    </tbl>
  </tables>
  <display>
    <fld name="EmpBenElg.*" />
    <fld name="EnrSum.EnrSum" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
<![CDATA[
RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
]]>
      </native>
    </fld>
    <fld name="PlnTyp.PlnTypName" />
    <fld name="PlnTyp.PlnTypDesc" />
    <fld name="Ben.BenName" />
    <fld name="Ben.IsEmpPremEmpAmt" />
    <fld name="Ben.IsEmpCovEmpAmt" />
    <fld name="Ben.IsCmpPremEmpAmt" />
    <fld name="Ben.IsCmpCovEmpAmt" />
    <fld name="Ben.IsTotPremEmpAmt" />
    <fld name="Ben.IsTotCovEmpAmt" />
    <fld name="Ben.IsFlxCrdEmpAmt" />
    <fld name="EnrSum.EnrStartDt" />
    <fld name="EnrSum.EnrEndDt" />
    <fld name="Ben.BenDesc" />
    <fld name="BenPln.DescLnk" />
    <fld name="BenPln.InsCar" />
    <fld name="BenPln.FSAAllow" />
    <fld name="BenPln.FSADepAllow" />
    <fld name="Ben.DepAllow" />
    <fld name="Ben.BenAllow" />
    <fld name="BenPln.ClmAllow" />
    <fld name="BenPln.UntAllow" />
    <fld name="BenPln.PCPAllow" />
  </display>
  <where>
    <and>
      <le>
        <fld name="EnrStartDt" type="datetime" />
        <val>[Date]</val>
      </le>
      <ge>
        <fld name="EnrEndDt" type="datetime" />
        <val>[Date]</val>
      </ge>
      <eq>
        <fld name="Emp.Emp" />
        <val>[var_Emp]</val>
      </eq>
    </and>
  </where>
  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="Ben.EnrSum" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
  </order>
  <includehistory>Yes</includehistory>
</dataset>

<dataset name="PendBenBnf">
  <tables>
    <tbl name="EmpDep" />
    <tbl name="EmpBenElg" join="RIGHT" to="EmpDep">
      <and>
        <eq>
          <fld name="EmpDep.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <isnull>
          <fld name="EmpBenElg.EmpBenElgEfdDt" />
        </isnull>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
        <eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>Yes</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="LEFT">
      <eq>
        <fld name="Ben.Ben" />
        <fld name="EmpBenElg.Ben" />
      </eq>
    </tbl>
    <tbl name="EnrSum" join="LEFT">
      <eq>
        <fld name="Ben.EnrSum" />
        <fld name="EnrSum.EnrSum" />
      </eq>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="PlnTyp.PlnTyp" />
        <fld name="BenPln.PlanType" />
      </eq>
    </tbl>
    <tbl name="EmpBenElgBnf" main="Yes" join="LEFT">
      <and>
        <eq>
          <fld name="EmpBenElgBnf.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgBnf.BnfNum" />
          <fld name="EmpDep.Dep" />
        </eq>
        <eq>
          <fld name="EmpDep.Beneficiary" type="YesNo" />
          <val type="YesNo">Yes</val>
        </eq>
      </and>
    </tbl>
  </tables>
  <display>
    <fld name="EmpDep.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
<![CDATA[
RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
]]>
      </native>
    </fld>
    <fld name="EnrSum.EnrSum" />
    <fld name="BnfPct" />
    <fld name="Contingency" />
    <fld name="EmpBenBnfStartDt" />
    <fld name="EmpBenElgBnfEfdDt" />
    <fld name="EmpBenElgBnf.EmpBenElgBnfId" />
    <fld name="EmpBenElgBnf.EmpBenElgBnfDt" />
    <fld name="EmpBenElgBnf.BnfNum" />
    <fld name="BnfName">
      <append>
        <fld name="EmpDep.DepLastName" type="String" />
        <val>, </val>
        <fld name="EmpDep.DepFirstName" type="String" />
      </append>
    </fld>
    <fld name="BnfSelect">
      <native lang="SQLServer">
        CASE WHEN NOT EmpBenElgBnf.BnfNum IS NULL AND EmpBenElgBnf.EmpBenElgBnfEfdDt IS NULL THEN 'Yes' ELSE 'No' END
      </native>
    </fld>
  </display>
  <where>
    <and>
      <le>
        <fld name="EnrStartDt" type="datetime" />
        <val>[Date]</val>
      </le>
      <ge>
        <fld name="EnrEndDt" type="datetime" />
        <val>[Date]</val>
      </ge>
      <eq>
        <fld name="EmpDep.Emp" type="String" />
        <val>[fld_PendBen.Emp]</val>
      </eq>
      <eq>
        <fld name="EmpDep.Beneficiary" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="Ben.BenAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
    </and>
  </where>
  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="Ben.EnrSum" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
  </order>
  <synchronize dataset="PendBen">
    <if>
      <when>
        <and>
          <eq>
            <val>[fld_PendBen.Emp]</val>
            <val>[fld_PendBenBnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.EnrSum]</val>
            <val>[fld_PendBenBnf.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.PlnOrd]</val>
            <val>[fld_PendBenBnf.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.PlnTyp]</val>
            <val>[fld_PendBenBnf.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.Ben]</val>
            <val>[fld_PendBenBnf.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Keep</then>
      <when>
        <and>
          <eq>
            <val>[fld_PendBen.Emp]</val>
            <val>[fld_PendBenBnf.Emp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.EnrSum]</val>
            <val>[fld_PendBenBnf.EnrSum]</val>
          </eq>
          <or>
            <ne>
              <val>[fld_PendBen.PlnOrd]</val>
              <val>[fld_PendBenBnf.PlnOrd]</val>
            </ne>
            <ne>
              <val>[fld_PendBen.PlnTyp]</val>
              <val>[fld_PendBenBnf.PlnTyp]</val>
            </ne>
            <ne>
              <val>[fld_PendBen.Ben]</val>
              <val>[fld_PendBenBnf.Ben]</val>
            </ne>
          </or>
        </and>
      </when>
      <then>Stop</then>
      <else>Skip</else>
    </if>
  </synchronize>
  <includehistory>Yes</includehistory>
</dataset>

<!-- 36177-LM-NV dependents for pending benefits -->
<dataset name="PendBenDep">
  <tables>
    <tbl name="EmpDep" />
    <tbl name="EmpBenElg" join="RIGHT" to="EmpDep">
      <and>
        <eq>
          <fld name="EmpDep.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <isnull>
          <fld name="EmpBenElg.EmpBenElgEfdDt" />
        </isnull>
        <eq>
          <fld name="EmpBenElg.Chosen" type="YesNo" />
          <val>Yes</val>
        </eq>
        <eq>
          <fld name="EmpBenElg.PendBen" type="YesNo" />
          <val>Yes</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Ben" join="LEFT">
      <eq>
        <fld name="Ben.Ben" />
        <fld name="EmpBenElg.Ben" />
      </eq>
    </tbl>
    <tbl name="EnrSum" join="LEFT">
      <eq>
        <fld name="Ben.EnrSum" />
        <fld name="EnrSum.EnrSum" />
      </eq>
    </tbl>
    <tbl name="BenPln" join="LEFT">
      <eq>
        <fld name="BenPln.BenPln" />
        <fld name="Ben.BenPln" />
      </eq>
    </tbl>
    <tbl name="PlnTyp" join="LEFT">
      <eq>
        <fld name="PlnTyp.PlnTyp" />
        <fld name="BenPln.PlanType" />
      </eq>
    </tbl>
    <tbl name="EmpBenElgDep" main="Yes" join="LEFT">
      <and>
        <eq>
          <fld name="EmpBenElgDep.Emp" />
          <fld name="EmpBenElg.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Ben" />
          <fld name="EmpBenElg.Ben" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Emp" />
          <fld name="EmpDep.Emp" />
        </eq>
        <eq>
          <fld name="EmpBenElgDep.Dep" />
          <fld name="EmpDep.Dep" />
        </eq>
        <eq>
          <fld name="EmpDep.Dependent" type="YesNo" />
          <val type="YesNo">Yes</val>
        </eq>
        <eq>
          <fld name="EmpDep.BenPart" type="YesNo" />
          <val type="YesNo">Yes</val>
        </eq>
      </and>
    </tbl>
    <tbl name="Rel" join="LEFT" to="EmpDep">
      <eq>
        <fld name="Rel.Rel" />
        <fld name="EmpDep.DepRelation" />
      </eq>
    </tbl>
    <tbl name="RelCvgLvl" join="LEFT" to="Rel">
      <and>
        <eq>
          <fld name="Rel.Rel" />
          <fld name="RelCvgLvl.Rel" />
        </eq>
        <eq>
          <fld name="RelCvgLvl.RelCvgLvl" />
          <fld name="Ben.PeopleCovered" />
        </eq>
      </and>
    </tbl>
  </tables>
  <display>
    <fld name="EmpDep.Emp" />
    <fld name="EmpBenElg.Eml" />
    <fld name="EnrSum.EnrSum" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="PlnTyp.PlnOrd">
      <native lang="SQLServer">
<![CDATA[
RIGHT('00' + CONVERT(nVarChar(15), PlnTyp.PlnOrd), 3)
]]>
      </native>
    </fld>
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
    <fld name="DepPhysician" />
    <fld name="EmpBenElgDepEffDt" />
    <fld name="EmpBenElgDepEfdDt" />
    <fld name="DepBenStartDt" />
    <fld name="DepBenEndDt" />
    <fld name="EmpBenElgDep.EmpBenElgDepId" />
    <fld name="EmpBenElgDep.EmpBenElgDepDt" />
    <fld name="DepName">
      <append>
        <fld name="EmpDep.DepLastName" type="String" />
        <val>, </val>
        <fld name="EmpDep.DepFirstName" type="String" />
      </append>
    </fld>
    <fld name="DepSelect">
      <native lang="SQLServer">CASE WHEN NOT EmpBenElgDep.Dep IS NULL AND EmpBenElgDep.EmpBenElgDepEfdDt IS NULL THEN 'Yes' ELSE
        'No' END</native>
    </fld>
  </display>
  <where>
    <and xml="keep">
      <le>
        <fld name="EnrStartDt" type="datetime" />
        <val>[Date]</val>
      </le>
      <ge>
        <fld name="EnrEndDt" type="datetime" />
        <val>[Date]</val>
      </ge>
      <eq>
        <fld name="EmpDep.Emp" type="String" />
        <val>[fld_PendBen.Emp]</val>
      </eq>
      <eq>
        <fld name="EmpDep.Dependent" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="EmpDep.BenPart" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <eq>
        <fld name="BenPln.DepAllow" type="YesNo" />
        <val type="YesNo">Yes</val>
      </eq>
      <or>
        <isnull>
          <fld name="Ben.PeopleCovered" />
        </isnull>
        <eq>
          <fld name="RelCvgLvl.RelCvgLvl" />
          <fld name="Ben.PeopleCovered" />
        </eq>
      </or>
    </and>
  </where>
  <order>
    <fld name="EmpBenElg.Emp" />
    <fld name="Ben.EnrSum" />
    <fld name="PlnTyp.PlnOrd" />
    <fld name="PlnTyp.PlnTyp" />
    <fld name="EmpBenElg.Ben" />
    <fld name="EmpDep.Dep" />
  </order>
  <synchronize dataset="PendBen">
    <if>
      <when>
        <and>
          <eq>
            <val>[fld_PendBen.Emp]</val>
            <val>[fld_PendBenDep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.EnrSum]</val>
            <val>[fld_PendBenDep.EnrSum]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.PlnOrd]</val>
            <val>[fld_PendBenDep.PlnOrd]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.PlnTyp]</val>
            <val>[fld_PendBenDep.PlnTyp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.Ben]</val>
            <val>[fld_PendBenDep.Ben]</val>
          </eq>
        </and>
      </when>
      <then>Keep</then>
      <when>
        <and>
          <eq>
            <val>[fld_PendBen.Emp]</val>
            <val>[fld_PendBenDep.Emp]</val>
          </eq>
          <eq>
            <val>[fld_PendBen.EnrSum]</val>
            <val>[fld_PendBenDep.EnrSum]</val>
          </eq>
          <or>
            <ne>
              <val>[fld_PendBen.PlnOrd]</val>
              <val>[fld_PendBenDep.PlnOrd]</val>
            </ne>
            <ne>
              <val>[fld_PendBen.PlnTyp]</val>
              <val>[fld_PendBenDep.PlnTyp]</val>
            </ne>
            <ne>
              <val>[fld_PendBen.Ben]</val>
              <val>[fld_PendBenDep.Ben]</val>
            </ne>
          </or>
        </and>
      </when>
      <then>Stop</then>
      <else>Skip</else>
    </if>
  </synchronize>
  <includehistory>Yes</includehistory>
</dataset>


<dataset name="BnfUpdate">
  <tables>
    <tbl name="EmpBenElgBnf" main="Yes" />
  </tables>
  <display>
    <fld name="EmpBenElgBnfId" key="Yes" />
    <fld name="Emp"/>
    <fld name="Eml" />
    <fld name="Ben" />
    <fld name="BnfNum" />
    <fld name="EmpBenElgBnfEffDt" />
    <fld name="EmpBenElgBnfEfdDt" />
    <fld name="EmpBenBnfStartDt" />
    <fld name="Contingency" />
    <fld name="BnfPct" />
  </display>
</dataset>

<dataset name="DepUpdate">
  <tables>
    <tbl name="EmpBenElgDep" main="Yes" />
  </tables>
  <display>
    <fld name="EmpBenElgDepId" key="Yes" />
    <fld name="Emp" />
    <fld name="Eml" />
    <fld name="Ben" />
    <fld name="Dep" />
    <fld name="EmpBenElgDepEffDt" />
    <fld name="EmpBenElgDepEfdDt" />
    <fld name="DepBenStartDt" />
    <fld name="DepPhysician" />
    <fld name="DepBenEligibleDt" />
  </display>
</dataset>

<dataset name="PendBenUpdate">
  <tables>
    <tbl name="EmpBenElg" main="Yes" />
  </tables>
  <display>
    <fld name="EmpBenElgId" key="Yes" />
    <fld name="PendBen" type="YesNo" />
    <fld name="Units" />
  </display>
</dataset>

<!-- Dataset Definition Block Starts -->
<!-- View Definition Block Starts -->
<view name="list">
  <!-- Include Header Control Definitions -->
  <script name="EmpHeaderCtls" />
  <!-- 47409-LM-NV: Eml Header Controls script added -->
  <script name="EmlHeaderCtls" />
  <!-- Form Control Display Logic Starts -->
  <display>
    <title>Employee Current Enrollment Benefits Dependents / Beneficiaries Details</title>
    <instructions>Choose Dependents / Beneficiaries</instructions>
    <head />
    <toolbar>
      <save />
    </toolbar>
    <body>
      <!-- Logic added for event REQ-725 -->
      <set var="[var_ESSReadOnly]" type="YesNo">
        <eq>
          <val>[F_Application]</val>
          <val>ESS</val>
        </eq>
      </set>

      <set var="[DepDatesReadonly]" type="YesNo">
        <eq>
          <val>[p_enroll]</val>
          <val>open</val>
        </eq>
      </set>

      <set var="[var_DedDateDsp]">[Cfg_DedDateDsp]</set>
      <set var="[var_PayEffectiveDt]">[Cfg_PayEffectiveDt]</set>
      <set var="[var_Emp]">[fld_main.EmpCde]</set>

      <set var="[NoSelection]">Yes</set>

      <!-- Controls Display Using main Dataset Starts -->
      <datasheet dataset="main" headers="TOP" showlinecount="No">
        <!-- Header Controls Display Starts -->
        <groups>
          <groupby val="[fld_EmpCde]">
            <header>
              <row>
                <col span="3">[ctl_EmpName][ctl_Emp]</col>
                <col span="3"></col>
              </row>
            </header>
          </groupby>
          <groupby val="[fld_EnrSum]">
            <if>
              <when>
                <and>
                  <ne>
                    <val>[fld_EnrSum]</val>
                    <val />
                  </ne>
                  <ne>
                    <val>[fld_PlnTyp]</val>
                    <val />
                  </ne>
                </and>
              </when>
              <then>
                <header xml="keep">
                  <row>
                    <col span="6">[ctl_EnrSum]</col>
                  </row>
                </header>
              </then>
            </if>
          </groupby>
          <!-- # 47409-LM-NV: Groupby Eml header for benefit screens added -->
          <script name="BenFrmEmlHdrGrp" />
          <groupby val="[fld_PlnTyp]">
            <if>
              <when>
                <ne>
                  <val>[fld_PlnTyp]</val>
                  <val />
                </ne>
              </when>
              <then>
                <header>
                  <row>
                    <col span="6">[ctl_PlnTypName]</col>
                  </row>
                  <if when="[fld_PlnTypDesc]">
                    <row>
                      <col span="6">[ctl_PlnTypDesc]</col>
                    </row>
                  </if>
                </header>
              </then>
            </if>
          </groupby>
        </groups>
        <!-- When main.PlnTyp Is Not NULL, Display Controls -->
        <if>
          <when>
            <ne>
              <val>[fld_PlnTyp]</val>
              <val />
            </ne>
          </when>
          <then>
            <!-- CSS Style Hack to prevent odd-looking striping.  Ends up rendering to class="rowEven-hack rowOdd"
              Warning: This exploits what is probably a bug in the XSLT; the fact that no space is put between rowEven and the row style attribute. -->
            <row style="-hack rowOdd">
              <col>
                <datasheet dataset="main" headers="TOP" showlinecount="No" next="No">
                  <row>
                    <!-- Initialize Variables -->
                    <set var="[BenStDt]">[fld_main.EmpBenElgEffDt]</set>
                    <set var="[VarParentRow]">main_[rownum_main]</set> <!-- Needed because there is no other convenient link between Dep/Bnf and main dataset row controls -->


                    <!-- Check if this record will have any history-worthy fields editable. (If so we should allow editing of date fields) -->
                    <set var="[HasWorthyEdits]" type="YesNo">
                      <or>
                        <val type="YesNo">[fld_main.FSAAllow]</val>
                        <val type="YesNo">[fld_main.FSADepAllow]</val>
                        <val type="YesNo">[fld_main.UntAllow]</val>
                        <val type="YesNo">[fld_main.IsCmpCovEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsCmpPremEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsEmpCovEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsEmpPremEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsFlxCrdEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsTotCovEmpAmt]</val>
                        <val type="YesNo">[fld_main.IsTotPremEmpAmt]</val>
                      </or>
                    </set>

                    <!-- Benefit Effective Date and Deduction Start Date should be editable (to create history) if premium values are being changed.  -->
                    <set var="[VarDatesEditable]" type="YesNo">
                      <and>
                        <eq><val>[Cfg_PayEffectiveDt]</val><val>Cort2</val></eq>
                        <ne><val>[F_Application]</val><val>ESS</val></ne>
                        <eq><val>[HasWorthyEdits]</val><val>Yes</val></eq>
                      </and>
                    </set>
                    <set var="[VarDatesReadonly]"><not>[VarDatesEditable]</not></set> <!-- Needed because ctl props cannot use <not> -->

                    <!-- Display Controls -->
                    <col>[ctl_BenName][ctl_Ben][ctl_AllowNumDeps]</col>
                    <col>[ctl_EmpBenElgEffDt]</col>
                    <!-- REQ#725-LM-NV: Logic Added To Display Controls DedDateDsp configuration value is Yes -->
                    <if when="[var_DedDateDsp]">
                        <if>
                          <when>[VarDatesEditable]</when>
                          <then>
                            <col>[ctl_EmpBenElgDedStartDt]</col>
                            <col>[ctl_EmpBenElgDedEndDt]</col>
                          </then>
                          <else>
                            <col>[ctl_EmpBenElgDedStartDtLbl]</col>
                            <col>[ctl_EmpBenElgDedEndDt]</col>
                          </else>
                        </if>
                    </if>
                    <if>
                      <when>
                        <and>
                          <eq>
                            <val>[var_PayEffectiveDt]</val>
                            <val>Cort</val>
                          </eq>
                          <eq>
                            <val>[F_Application]</val>
                            <val>HR</val>
                          </eq>
                          <eq>
                            <val>[HasWorthyEdits]</val>
                            <val>Yes</val>
                          </eq>
                        </and>
                      </when>
                      <then>
                        <col>[ctl_EmpBenElgPayEffectiveDt]</col>
                      </then>
                    </if>
                    <!-- End of logic for event REQ-725 -->
                    <col>[ctl_InsCar]</col>

                    <!-- Company Coverage.   If IsCmpCovEmpAmt = Yes then show editable control, Othewise show readonly control, but only if CmpCov greater than 0 -->
                    <if>
                      <when>
                        <eq>
                          <val>[fld_main.IsCmpCovEmpAmt]</val>
                          <val>Yes</val>
                        </eq>
                      </when>
                      <then>
                        <!-- Display Editable Control CmpCov -->
                        <col align="RIGHT">[ctl_CmpCov]</col>
                      </then>
                      <else>
                        <if>
                          <!-- When main.CmpCov Is Greater Than 0 -->
                          <when>
                            <gt>
                              <val type="Number">[fld_main.CmpCov]</val>
                              <val type="Number">0</val>
                            </gt>
                          </when>
                          <then>
                            <!-- Display ReadOnly Control CmpCovLbl -->
                            <col align="RIGHT">[ctl_CmpCovLbl]</col>
                          </then>
                        </if>
                      </else>
                    </if>

                    <!-- # When main.IsEmpCovEmpAmt = Yes, $ Display Editable Control EmpCov
                      # Else, $ When main.EmpCov Is Greater Than 0, @ Display ReadOnly Control EmpCovLbl -->
                    <if>
                      <!-- When main.IsEmpCovEmpAmt = Yes -->
                      <when>
                        <eq>
                          <val>[fld_main.IsEmpCovEmpAmt]</val>
                          <val>Yes</val>
                        </eq>
                      </when>
                      <then>
                        <!-- Display Editable Control EmpCov -->
                        <col align="RIGHT">[ctl_EmpCov]</col>
                      </then>
                      <else>
                        <if>
                          <!-- When main.EmpCov Is Greater Than 0 -->
                          <when>
                            <gt>
                              <val>[fld_main.EmpCov]</val>
                              <val>0</val>
                            </gt>
                          </when>
                          <then>
                            <!-- Display Editable Control EmpCov -->
                            <col align="RIGHT">[ctl_EmpCovLbl]</col>
                          </then>
                        </if>
                      </else>
                    </if>
                    <!-- Display Control EmpPayDedAmt -->
                    <col align="RIGHT">[ctl_EmpPayPdDed]</col>
                    <!-- # When F_Application = ESS, $ When main.IsCmpPremEmpAmt = Yes,
                      Display Editable Control EmpPrem $ Else, Display Editable Control EmpPremLbl -->
                    <if>
                      <when>
                        <ne>
                          <val>[F_Application]</val>
                          <val>ESS</val>
                        </ne>
                      </when>
                      <then>
                        <if>
                          <!-- Case When main.IsCmpPremEmpAmt = Yes -->
                          <when>
                            <eq>
                              <val>[fld_main.IsCmpPremEmpAmt]</val>
                              <val>Yes</val>
                            </eq>
                          </when>
                          <then>
                            <!-- Display Editable Control EmpPrem -->
                            <col align="RIGHT">[ctl_CmpPrem]</col>
                          </then>
                          <else>
                            <!-- Display ReadOnly Control EmpPremLbl -->
                            <col align="RIGHT">[ctl_CmpPremLbl]</col>
                          </else>
                        </if>
                      </then>
                    </if>
                    <!-- # When main.IsEmpPremEmpAmt = Yes, Display Editable Control EmpPrem # Else, Display ReadOnly Control EmpPremLbl -->
                    <if>
                      <!-- Case When main.IsEmpPremEmpAmt = Yes -->
                      <when>
                        <eq>
                          <val>[fld_main.IsEmpPremEmpAmt]</val>
                          <val>Yes</val>
                        </eq>
                      </when>
                      <then>
                        <!-- Display Editable Control EmpPrem -->
                        <col align="RIGHT">[ctl_EmpPrem]</col>
                      </then>
                      <else>
                        <!-- Display ReadOnly Control EmpPremLbl -->
                        <col align="RIGHT">[ctl_EmpPremLbl]</col>
                      </else>
                    </if>
                    <!-- # When main.IsFlxCrdAmt = Yes, $ Display Editable Control FlexCredits
                      # Else, $ When main.FlexCredits Is Greater Than 0, @ Display ReadOnly Control
                      FlexCreditsLbl -->
                    <if>
                      <!-- Case When main.IsFlxCrdAmt = Yes -->
                      <when>
                        <eq>
                          <val>[fld_main.IsFlxCrdEmpAmt]</val>
                          <val>Yes</val>
                        </eq>
                      </when>
                      <then>
                        <!-- Display Editable Control FlexCredits -->
                        <col align="RIGHT">[ctl_FlexCredits]</col>
                      </then>
                      <else>
                        <if>
                          <!-- Case When main.FlexCredits Is Greater Than 0 -->
                          <when>
                            <gt>
                              <val>[fld_main.FlexCredits]</val>
                              <val>0</val>
                            </gt>
                          </when>
                          <then>

                            <!-- Display Editable Control FlexCreditsLbl -->
                            <col align="RIGHT">[ctl_FlexCreditsLbl]</col>
                          </then>
                        </if>
                      </else>
                    </if>
                    <!-- # When main.FSAAllow Is Not NULL, $ When F_Application = ESS,
                      Display ReadOnly Control AnnElectAmtLabel $ Else, Display Editable Control AnnlElectAmt -->
                    <if when="[fld_main.FSAAllow]">
                      <!--<if>-->
                        <!-- Case When F_Application = ESS -->
                        <!--<when>
                          <eq>
                            <val>[F_Application]</val>
                            <val>ESS</val>
                          </eq>
                        </when>
                        <then>-->
                          <!-- Display ReadOnly Control -->
                          <!--<set var="[AnnElectAmtReadonly]">Yes</set>
                        </then>
                        <else>-->
                          <!-- Display Editable Control -->
                          <!--<set var="[AnnElectAmtReadonly]">No</set>
                        </else>
                      </if>-->
                      <col>[ctl_AnnElectAmt][ctl_AnnlAmtMin][ctl_AnnlAmtMax]</col>
                      <!-- Display Control PayrollDeduction -->
                      <col>[ctl_PayrollDeduction]</col>
                    </if>
                    <!-- 36177-LN-NV -->
                    <!-- # When main.FSADepAllow Is Not NULL, $ When F_Application = ESS,
                      Display ReadOnly Control $ Else, Display Editable Control DepAnnlElectAmt -->
                    <if when="[fld_main.FSADepAllow]">
                      <!--<if>-->
                        <!-- Case When F_Application = ESS -->
                        <!--<when>
                          <eq>
                            <val>[F_Application]</val>
                            <val>ESS</val>
                          </eq>
                        </when>
                        <then>
                          <col>[ctl_DepAnnElectAmtLabel]</col>
                        </then>
                        <else>-->
                          <col>[ctl_DepAnnElectAmt][ctl_DepAnnlAmtMin][ctl_DepAnnlAmtMax]</col>
                        <!--</else>
                      </if>-->
                    </if>
                    <if when="[fld_main.UntAllow]">
                      <col align="RIGHT">[ctl_Units]</col>
                    </if>
                    <if when="[fld_main.PCPAllow]">
                      <col>[ctl_Physician]</col>
                    </if>
                  </row>
                </datasheet>


                <!-- # When main.DepAllow Is Not NULL, $ Set Variable isPCPAllow To NULL $ When main.PCPAllow Is Not NULL, @ Set Variable
                  isPCPAllow = Yes $ Display Dependent Rows -->
                <if when="[fld_main.DepAllow]">

                  <!-- Display Dependent Rows Using Dep Dataset -->
                  <set var="[VarEligibleDt]">[fld_main.EligibleDt]</set>
                  <datasheet dataset="Dep" headers="TOP" showlinecount="No">
                    <groups>
                      <groupby val="Singleton">
                        <header>
                          <row>
                            <col>[ctl_PplCovTtl]</col>
                          </row>
                        </header>
                      </groupby>
                    </groups>
                    <set var="[VarElgDepId]">[fld_Dep.EmpBenElgDepId]</set>
                    <row>
                      <col>[ctl_EmlLabel1]</col>
                      <col>[ctl_SysDepSelect][ctl_Dep][ctl_Emp][ctl_Eml][ctl_Ben][ctl_ParentRow][ctl_EligibleDt][ctl_SysElgDepId][ctl_DepRelation]</col>
                      <col>[ctl_DepName]</col>
                      <col>[ctl_DepBenStartDt]</col>
                      <if>
                        <when>
                          <eq>
                            <val>[fld_main.PCPAllow]</val>
                            <val>Yes</val>
                          </eq>
                        </when>
                        <then>
                          <col>[ctl_DepPhysician]</col>
                        </then>
                      </if>
                    </row>
                  </datasheet>
                </if>

                <if when="[fld_main.BenAllow]">

                  <datasheet dataset="Bnf" headers="TOP" showlinecount="No">
                    <set var="[VarElgBnfId]">[fld_Bnf.EmpBenElgBnfId]</set>
                    <row>
                      <set var="[var_bnfNotSel]">No</set>
                      <col>[ctl_EmlLabel1]</col>
                      <if>
                        <when>
                          <eq>
                            <val>[fld_Bnf.Beneficiary]</val>
                            <val>No</val>
                          </eq>
                        </when>
                        <then>
                          <set var="[var_bnfNotSel]">Yes</set>
                          <col />
                        </then>
                        <else>
                          <set var="[var_bnfNotSel]">No</set>
                          <col>[ctl_SysBnfSelect]</col>
                        </else>
                      </if>
                      <col>[ctl_BnfName][ctl_BnfNum][ctl_Emp][ctl_Eml][ctl_Ben][ctl_ParentRow][ctl_SysElgBnfId]</col>
                      <!-- 71348-SK-NV - End of Logic -->
                      <col>[ctl_EmpBenBnfStartDt]</col>
                      <col>[ctl_Contingency]</col>
                      <col>[ctl_BnfPct]</col>
                    </row>
                  </datasheet>
                </if>
            </col>
            </row>
            <!-- Set Variable NoSelection = No -->
            <set var="[NoSelection]">No</set>
          </then>
          <!-- Case When main.PlnTyp = Yes -->
        </if>
      </datasheet>
      <blankline />

      <!-- Do not show the pending benefits section on wizards or for OE -->
      <if>
        <when>
            <eq>
              <val>[P_enroll]</val>
              <val>current</val>
            </eq>
        </when>
        <then>

          <datasheet dataset="PendBen" headers="TOP" showlinecount="Yes" title="Pending Benefits">
            <groups>
              <groupby val="[fld_EnrSum]">
                <if>
                  <when>
                    <ne>
                      <val>[fld_EnrSum]</val>
                      <val />
                    </ne>
                  </when>
                  <then>
                    <header>
                      <row>
                        <col>[ctl_EnrSum]</col>
                      </row>
                    </header>
                  </then>
                </if>
              </groupby>
              <groupby val="[fld_PlnTyp]">
                <if>
                  <when>
                    <ne>
                      <val>[fld_PlnTyp]</val>
                      <val />
                    </ne>
                  </when>
                  <then>
                    <header>
                      <row>
                        <col>[ctl_PlnTypName]</col>
                      </row>
                      <if when="[fld_PlnTypDesc]">
                        <row>
                          <col>[ctl_PlnTypDesc]</col>
                        </row>
                      </if>
                    </header>
                  </then>
                </if>
              </groupby>
            </groups>
            <if>
              <when>
                <ne>
                  <val>[fld_PlnTyp]</val>
                  <val />
                </ne>
              </when>
              <then>
                <row>
                  <col span="10">
                    <datasheet dataset="PendBen" headers="TOP" showlinecount="No" next="No">
                      <row>
                        <set var="[BenStDt]">[fld_PendBen.EmpBenElgEffDt]</set>
                        <set var="[VarParentRow]">PendBen_[rownum_PendBen]</set> <!-- Needed because there is no other convenient link between Dep/Bnf and main dataset row controls -->
                        <if>
                          <when>
                            <ne>
                              <val>[F_Application]</val>
                              <val>ESS</val>
                            </ne>
                          </when>
                          <then>
                            <col>[ctl_PendBen]</col>
                          </then>
                        </if>
                        <col>[ctl_BenName][ctl_Emp]</col>
                        <!-- REQ-725-LM-NV Dispaying logic added for Deduction Date -->
                        <if>
                          <when>
                            <eq>
                              <val>[var_DedDateDsp]</val>
                              <val>Yes</val>
                            </eq>
                          </when>
                          <then>
                            <col>[ctl_EmpBenElgDedStartDt]</col>
                            <col>[ctl_EmpBenElgDedEndDt]</col>
                          </then>
                        </if>
                        <!-- End of logic for event REQ-725 -->
                        <col>[ctl_InsCar]</col>
                        <if>
                          <when>
                            <eq>
                              <val>[fld_PendBen.IsCmpCovEmpAmt]</val>
                              <val>Yes</val>
                            </eq>
                          </when>
                          <then>
                            <col align="RIGHT">[ctl_CmpCov]</col>
                          </then>
                          <else>
                            <if>
                              <when>
                                <gt>
                                  <val type="Number">[fld_PendBen.CmpCov]</val>
                                  <val type="Number">0</val>
                                </gt>
                              </when>
                              <then>
                                <col align="RIGHT">[ctl_CmpCovLbl]</col>
                              </then>
                            </if>
                          </else>
                        </if>
                        <if>
                          <when>
                            <eq>
                              <val>[fld_PendBen.IsEmpCovEmpAmt]</val>
                              <val>Yes</val>
                            </eq>
                          </when>
                          <then>
                            <col align="RIGHT">[ctl_EmpCov]</col>
                          </then>
                          <else>
                            <if>
                              <when>
                                <gt>
                                  <val>[fld_PendBen.EmpCov]</val>
                                  <val>0</val>
                                </gt>
                              </when>
                              <then>
                                <col align="RIGHT">[ctl_EmpCovLbl]</col>
                              </then>
                            </if>
                          </else>
                        </if>
                        <if>
                          <when>
                            <and>
                              <eq>
                                <val>[fld_PendBen.IsCmpPremEmpAmt]</val>
                                <val>Yes</val>
                              </eq>
                              <ne>
                                <val>[F_Application]</val>
                                <val>ESS</val>
                              </ne>
                            </and>
                          </when>
                          <then>
                            <col align="RIGHT">[ctl_CmpPrem]</col>
                          </then>
                          <else>
                            <col align="RIGHT">[ctl_CmpPremLbl]</col>
                          </else>
                        </if>
                        <if>
                          <when>
                            <and>
                              <eq>
                                <val>[fld_PendBen.IsEmpPremEmpAmt]</val>
                                <val>Yes</val>
                              </eq>
                              <ne>
                                <val>[F_Application]</val>
                                <val>ESS</val>
                              </ne>
                            </and>
                          </when>
                          <then>
                            <col align="RIGHT">[ctl_EmpPrem]</col>
                          </then>
                          <else>
                            <col align="RIGHT">[ctl_EmpPremLbl]</col>
                          </else>
                        </if>
                        <if>
                          <when>
                            <eq>
                              <val>[fld_PendBen.IsFlxCrdEmpAmt]</val>
                              <val>Yes</val>
                            </eq>
                          </when>
                          <then>
                            <col align="RIGHT">[ctl_FlexCredits]</col>
                          </then>
                          <else>
                            <if>
                              <when>
                                <gt>
                                  <val>[fld_PendBen.FlexCredits]</val>
                                  <val>0</val>
                                </gt>
                              </when>
                              <then>
                                <col align="RIGHT">[ctl_FlexCreditsLbl]</col>
                              </then>
                            </if>
                          </else>
                        </if>
                        <if when="[fld_PendBen.FSAAllow]">
                          <col>[ctl_AnnElectAmt]</col>
                        </if>
                        <if when="[fld_PendBen.FSADepAllow]">
                          <col>[ctl_DepAnnElectAmt]</col>
                        </if>
                        <if when="[fld_PendBen.UntAllow]">
                          <col align="RIGHT">[ctl_Units]</col>
                        </if>
                        <if when="[fld_PendBen.PCPAllow]">
                          <col>[ctl_Physician]</col>
                        </if>
                      </row>
                    </datasheet>
                  </col>
                </row>
                <if when="[fld_PendBen.DepAllow]">

                  <!-- Display Dependent Rows Using PendBenDep Dataset -->
                  <set var="[VarEligibleDt]">[fld_PendBen.EligibleDt]</set>
                  <datasheet dataset="PendBenDep" headers="TOP" showlinecount="No">
                    <groups>
                      <groupby val="Singleton">
                        <header>
                          <row>
                            <col>[ctl_PplCovTtl]</col>
                          </row>
                        </header>
                      </groupby>
                    </groups>
                    <set var="[VarElgDepId]">[fld_PendBenDep.EmpBenElgDepId]</set>
                    <row>
                      <col>[ctl_EmlLabel1]</col>
                      <col>[ctl_SysDepSelect][ctl_Dep][ctl_Emp][ctl_Eml][ctl_Ben][ctl_ParentRow][ctl_EligibleDt][ctl_SysElgDepId]</col>
                      <col>[ctl_DepName]</col>
                      <col>[ctl_DepBenStartDt]</col>
                      <if>
                        <when>
                          <eq>
                            <val>[fld_PendBen.PCPAllow]</val>
                            <val>Yes</val>
                          </eq>
                        </when>
                        <then>
                          <col>[ctl_DepPhysician]</col>
                        </then>
                      </if>
                    </row>
                  </datasheet>
                </if>

                <if when="[fld_PendBen.BenAllow]">
                  <row>
                    <col>
                      <datasheet dataset="PendBenBnf" headers="TOP" showlinecount="No">
                        <set var="[VarElgBnfId]">[fld_PendBenBnf.EmpBenElgBnfId]</set>
                        <row>
                          <col>[ctl_EmlLabel1]</col>
                          <col>[ctl_BnfName][ctl_BnfNum][ctl_Emp][ctl_Eml][ctl_Ben][ctl_ParentRow][ctl_SysElgBnfId]</col>
                          <col>[ctl_EmpBenBnfStartDt]</col>
                          <col>[ctl_Contingency]</col>
                          <col>[ctl_BnfPct]</col>
                        </row>
                      </datasheet>
                    </col>
                  </row>
                </if>
                <set var="[NoSelection]">No</set>
              </then>
            </if>
          </datasheet>

        </then>
      </if>
      <!-- If NoSelection = Yes, Display No Selection Message -->
      <if when="[NoSelection]">
        <v>Employee has not chosen any Benefits</v>
      </if>
    </body>
  </display>
</view>

<!-- View Definition Block Ends -->
<!-- Form: EmpBenElgDepRvw -->